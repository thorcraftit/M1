'VBSCabinetVisionByRoomImport
'Public Classes For Cabinet Vision Import Version 8
'Public Function Class_Initialize() - This should never be ran, it is automatic when the Class is created
'Public Function OpenDatabases() AS Boolean: Returns Database Opened - This should be ran first
'Public Function ImportUnitOfIssue() AS Integer: Count of Records Saved - This shoud be ran before ImportMaterials
'Public Function ImportMaterials() AS Integer: Count of Records Saved - This should be ran before ImportQuoteAssemblies
'Public Function CreateProjectQuoteLines(QuoteID, ProjectID, ProjectAreaID) - Imports Report, generating Project, Project Area, Quote Lines
'Public Function CloseDatabases()

Private ReportDBConnection
Private MaterialsDBConnection
Private AccessoriesDBConnection
Private DatabasesOpen
Private ErrorMessages
Private CONNECT_REPORT_DATABASE
Private CONNECT_MATERIALS_DATABASE
Private CONNECT_ACCESSORIES_DATABASE
Private MATERIAL_DATABASE
Private ACCESSORIES_DATABASE
Private REPORT_DATABASE
Private DEBUG_MODE
Private BUILD_MODE
Private VERBOSE
Private IMPORT_TO_ROOM
Private IMPORT_TO_CABINET

Public Sub Class_Initialize
	
	Set ReportDBConnection = CreateObject("ADODB.Connection")
	Set MaterialsDBConnection = CreateObject("ADODB.Connection")
	Set AccessoriesDBConnection = CreateObject("ADODB.Connection")
	
	BUILD_MODE = False
	DEBUG_MODE = False
	VERBOSE  = false
	
	ErrorMessages = Array()
	
	Set wshShell = CreateObject("WScript.Shell")
	UserProfile = wshShell.ExpandEnvironmentStrings("%USERPROFILE%")
	UserName = wshShell.ExpandEnvironmentStrings("%USERNAME%")
	
	If Not BUILD_MODE Then
		MATERIAL_DATABASE = "\\cv\Planit\Solid_8_0\Database\Material.cvm"
		ACCESSORIES_DATABASE = "\\cv\Planit\Solid_8_0\Database\Accessories.cvc"
		REPORT_DATABASE = "C:\Planit\Users\" & UserName & "\report.mdb"
	Else	
		MATERIAL_DATABASE = UserProfile & "\Material.cvm"
		REPORT_DATABASE = UserProfile & "\report.mdb"
		ACCESSORIES_DATABASE = UserProfile & "\Accessories.cvc"
	End If
	
	CONNECT_REPORT_DATABASE = 1
	CONNECT_MATERIALS_DATABASE = 2
	CONNECT_ACCESSORIES_DATABASE = 3
	
	IMPORT_TO_ROOM = 1
	IMPORT_TO_CABINET = 2
	
	DatabasesOpen = False
End Sub

Public Function CloseDatabases()
	Const TOTAL_DATABASES_TO_CONNECT = 3
	DataBaseCount = 1
	
	Do While DataBaseCount <= TOTAL_DATABASES_TO_CONNECT
		Select Case DatabaseCount
			Case 1
				Set Database = ReportDBConnection
			Case 2
				Set Database = MaterialsDBConnection
			Case 3
				Set Database = AccessoriesDBConnection
		End Select
		
		If IsObject(Database) Then
			If Database.State = 1 Then
				Database.Close
			End If
			Set Database = CreateObject("ADODB.Connection")
		End If
		
		DataBaseCount = DataBaseCount + 1
	Loop
End Function

Private Sub AddErrorMessage(Description)
	Redim Preserve ErrorMessages(uBound(ErrorMessages) + 1)
	ErrorMessages(uBound(ErrorMessages)) = Description
End Sub

Private Sub Class_Terminate() 
	CloseDatabases
End Sub 

'Don't want this to make the connection until the user requests it
Public Function OpenDatabases()
	Const TOTAL_DATABASES_TO_CONNECT = 3
	DataBaseCount = 1
	
	Do While DataBaseCount <= TOTAL_DATABASES_TO_CONNECT
		Select Case DatabaseCount
			Case 1
				ConnectionString = GetConnectionString(CONNECT_REPORT_DATABASE)
				Set Database = ReportDBConnection
			Case 2
				ConnectionString = GetConnectionString(CONNECT_MATERIALS_DATABASE)
				Set Database = MaterialsDBConnection
			Case 3
				ConnectionString = GetConnectionString(CONNECT_ACCESSORIES_DATABASE)
				Set Database = AccessoriesDBConnection
		End Select
		
		If ConnectionString <> "" Then
			Database.Open ConnectionString
		Else
			Exit Do
		End If
		
		DataBaseCount = DataBaseCount + 1
	Loop

	OpenDatabases = ReportDBConnection.State = 1 _
 								 AND MaterialsDBConnection.State = 1_
 								 AND AccessoriesDBConnection.State = 1
	
	DatabasesOpen = ReportDBConnection.State = 1 _
								  AND MaterialsDBConnection.State = 1_
								  AND AccessoriesDBConnection.State = 1
End Function
				
Private Function GetConnectionString(ConnectionType)
	Set wshShell = CreateObject("WScript.Shell")
	UserName = wshShell.ExpandEnvironmentStrings("%USERNAME%")
	Select Case ConnectionType 
		CASE CONNECT_REPORT_DATABASE
			FilePath = REPORT_DATABASE
			FileName = "Report File"
			FileType = "Report Database (*.mdb)|*.mdb|All Files (*.*)|*.*"
		CASE CONNECT_MATERIALS_DATABASE
			FilePath = MATERIAL_DATABASE
			FileName = "Material File"
			FileType = "Material Database (*.cvm)|*.cvm|All Files (*.*)|*.*"
		CASE CONNECT_ACCESSORIES_DATABASE
			FilePath = ACCESSORIES_DATABASE
			FileName = "Accessories File"
			FileType = "Accessories Database (*.cvc)|*.cvc|All Files (*.*)|*.*"
		CASE Else
			App.ErrorMsg "Bad Call to get Connection String.", "Cabinet Vision BOM Import", 102
			GetConnectionString = ""
			Exit Function
	End Select
	
	Set FileSystem = CreateObject("Scripting.FileSystemObject")

	If Not FileSystem.FileExists(FilePath) Then 
		If Forms.CommonDialogs.OpenFile(FilePath, _
		                               FileType, _
			                             1, _
			                             FileName) Then
			If Not FileSystem.FileExists(FilePath) Then  
				App.ErrorMsg "Unable to Locate File for " & FileName & " - " & FilePath, "Cabinet Vision BOM Import", 100
				GetConnectionString = ""
				Exit Function
			End If
		Else
			App.ErrorMsg "Unable to Locate File for " & FileName & " - " & FilePath, "Cabinet Vision BOM Import", 100
			GetConnectionString = ""
			Exit Function
		End If
	End If
	
	GetConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;" & _
                        "User ID=Admin;" & _
                        "Data Source=" & FilePath & ";" & _
                        "Mode=Share Deny None;" & _
                        "Jet OLEDB:System database="""";" & _
                        "Jet OLEDB:Registry Path="""";" & _
                        "Jet OLEDB:Database Password="""";" & _
                        "Jet OLEDB:Engine Type=4;" & _
                        "Jet OLEDB:Database Locking Mode=0;" & _
                        "Jet OLEDB:Global Partial Bulk Ops=2;" & _
                        "Jet OLEDB:Global Bulk Transactions=1;" & _
                        "Jet OLEDB:New Database Password="""";" & _
                        "Jet OLEDB:Create System Database=False;" & _
                        "Jet OLEDB:Encrypt Database=False;" & _
                        "Jet OLEDB:Don't Copy Locale on Compact=False;" & _
                        "Jet OLEDB:Compact Without Replica Repair=False;" & _
                        "Jet OLEDB:SFP=False;"
End Function
					
Public Function ImportUnitOfIssue()
	If Not DatabasesOpen Then 
		Exit Function
	End If
	
	Set rsuUnitOfIssue = GetM1UnitOfIssue
	Set rsCVUnitOfIssue = GetUniqueUnitOfIssue
	
	Do While Not rsCVUnitOfIssue.EOF
		If Not UnitOfIssueExists(rsCVUnitOfIssue.Fields("Index").Value) Then
			CreateUnitOfMeasure rsuUnitOfIssue, rsCVUnitOfIssue.Fields("Index").Value, rsCVUnitOfIssue.Fields("Unit of Issue").Value
		End If
		
		rsCVUnitOfIssue.MoveNext
	Loop
	
	If UpdateUnitOfIsssueRecords(rsuUnitOfIssue) Then
		ImportUnitOfIssue = rsuUnitOfIssue.RecordCount
	Else
		ImportUnitOfIssue = 0
	End If
	
	Forms.MessageWindow "Done Importing Unit Of Issue. - " & rsuUnitOfIssue.RecordCount & " imported.", 5, Nothing
End Function
			
Private Function GetM1UnitOfIssue()
	Set rsuUnitOfIssue = CreateObject("ADODB.RecordSet")
	rsuUnitOfIssue.Open _ 
		"	SELECT * " & _
		"	FROM   uUnitOfIssue " & _ 
		"	WHERE  0 = 1", _ 
		Connection, adOpenStatic, adLockBatchOptimistic, adCmdText
	
	Set GetM1UnitOfIssue = rsuUnitOfIssue
End Function
			
Private Function GetUniqueUnitOfIssue()
	SET GetUniqueUnitOfIssue = MaterialsDBConnection.Execute("	SELECT Index, [Unit of Issue] " & _
	                                                         "	FROM   [Look Unit Of Issue] ")
End Function
			
Private Function UnitOfIssueExists(UnitOfIssueID)
	UnitOfIssueExists = Not Connection.Execute("	SELECT 1 " & _
					                                   "	FROM   uUnitOfIssue " & _
						                                 "	WHERE  uciCabinetVisionID = " & App.Convert.NumberToSql(UnitOfIssueID)).EOF
End Function
			
Private Function CreateUnitOfMeasure(ByRef rsuUnitOfIssue, CabinetVisionID, Description)
	rsuUnitOfIssue.AddNew
	App.BlankRecord rsuUnitOfIssue
'	rsuUnitOfIssue.Fields("uciUnitOfIssueID").value = App.GetNextIDForTable("uUnitOfIssue")
'	rsuUnitOfIssue.Fields("uciUnitOfIssueID").value = App.GenerateNextIDForTable("uUnitOfIssue")
	rsuUnitOfIssue.Fields("uciUnitOfIssueID").value = App.Ax("LegacyFunctions").GetNextIDForTable("uUnitOfIssue")
	rsuUnitOfIssue.Fields("uciCabinetVisionID").value = CabinetVisionID
	rsuUnitOfIssue.Fields("uciDescription").value = LEFT(Description, 50)
	rsuUnitOfIssue.Fields("uciQuantityFormula").value = "Formula = 1"
	rsuUnitOfIssue.Fields("uciCreatedBy").value = App.UserID
	rsuUnitOfIssue.Fields("uciCreatedDate").value = Now()
End Function
			
Private Function UpdateUnitOfIsssueRecords(ByRef rsuUnitOfIssue)	
	On Error Resume Next
	App.BeginTransaction
	
	rsuUnitOfIssue.UpdateBatch
	
	If Err.Number = 0 Then
		App.CommitTransaction
		UpdateUnitOfIsssueRecords = True
	Else
		App.ErrorMsg Err.Description, "Cabinet Vision BOM Import - Import Unit Of Issue", Err.Number
		App.RollbackTransaction
		UpdateUnitOfIsssueRecords = False
	End If
	
	On Error Goto 0
End Function
			
Public Function ImportMaterials()
	If Not DatabasesOpen Then 
		Exit Function
	End If
	
	Set rsuUnitOfIssue = GetUnitOfIssues()
	Set rsuMaterials = GetMaterials()
	Set rsCVMaterials = GetAllCVMaterials()
	
	Do While Not rsCVMaterials.EOF
		If Not MaterialExists(rsCVMaterials.Fields("ID").Value) Then
			rsuUnitOfIssue.Filter = "uciCabinetVisionID = " & App.Convert.NumberToSql(rsCVMaterials.Fields("UnitOfIssue").Value)
			If Not rsuUnitOfIssue.EOF Then
				CreateMaterials rsuMaterials, rsCVMaterials.Fields("ID").Value, rsCVMaterials.Fields("Name").Value, _
		                    rsuUnitOfIssue.Fields("uciUnitOfIssueID").Value, 1
			Else
				App.ErrorMsg "Unknown Unit Of Issue located.", "Cabinet Vision BOM Import - Import Material", 1500
				ImportMaterials = -1
				Exit Function
			End If
		End If
		
		rsCVMaterials.MoveNext
	Loop
	
	Set rsAccessories = GetAccessories()
	Do While Not rsAccessories.EOF
		If Not AccessoryExists(rsAccessories.Fields("AAssemblyID").Value) Then
			CreateMaterials rsuMaterials, rsAccessories.Fields("AAssemblyID").Value, rsAccessories.Fields("Nomenclature").Value, _
		                  0, 2
		End If
		rsAccessories.MoveNext
	Loop
	
	If UpdateMaterialsRecords(rsuMaterials) Then
		ImportMaterials = rsuMaterials.RecordCount
	Else
		ImportMaterials = 0
	End If
	
	Forms.MessageWindow "Done Importing Materials. - " & rsuMaterials.RecordCount & " imported.", 5, Nothing
End Function
			
Private Function GetMaterials()
	Set rsuMaterials = CreateObject("ADODB.RecordSet")
	rsuMaterials.Open _ 
		"	SELECT * " & _
		"	FROM   uMaterials " & _ 
		"	WHERE  0 = 1", _ 
		Connection, adOpenStatic, adLockBatchOptimistic, adCmdText
	
	Set GetMaterials = rsuMaterials
End Function
			
Private Function GetAccessories()
	Set GetAccessories = AccessoriesDBConnection.Execute( "	SELECT AAssemblyID, Nomenclature " & _
	                                                      "	FROM   Accessories " & _
	                                                      "	       INNER JOIN Assembly " & _
	                                                      "	               ON (Accessories.AAssemblyID = Assembly.AssemblyID) ")
End Function
			
Private Function MaterialExists(MaterialID)
	MaterialExists = Not Connection.Execute("	SELECT 1 " & _
					                                "	FROM   uMaterials " & _
						                              "	WHERE  ucmCabinetVisionID = " & App.Convert.NumberToSql(MaterialID) & _
		                                      "	       AND ucmMaterialType = 1").EOF
End Function
			
Private Function AccessoryExists(MaterialID)
	AccessoryExists = Not Connection.Execute("	SELECT 1 " & _
					                                 "	FROM   uMaterials " & _
						                               "	WHERE  ucmCabinetVisionID = " & App.Convert.NumberToSql(MaterialID) & _
		                                       "	       AND ucmMaterialType = 2").EOF
End Function
			
Private Function CreateMaterials(ByRef rsuMaterials, MaterialID, Description, _
	                               UnitOfIssueID, MaterialType)
	rsuMaterials.AddNew
	App.BlankRecord rsuMaterials
'	rsuMaterials.Fields("ucmMaterialID").value = App.GetNextIDForTable("uMaterials")
'	rsuMaterials.Fields("ucmMaterialID").value = App.GenerateNextIDForTable("uMaterials")
	rsuMaterials.Fields("ucmMaterialID").value = App.Ax("LegacyFunctions").GetNextIDForTable("uMaterials")
	rsuMaterials.Fields("ucmCabinetVisionID").value = MaterialID	
	rsuMaterials.Fields("ucmMaterialType").Value = MaterialType
	rsuMaterials.Fields("ucmUnitOfIssueID").value = UnitOfIssueID
	rsuMaterials.Fields("ucmCreatedBy").value = App.UserID
	rsuMaterials.Fields("ucmCreatedDate").value = Now()	
	
	If IsNull(Description) Then
		rsuMaterials.Fields("ucmDescription").value = "NULL VALUE"
	ElseIf Trim(Description) = "" then
		rsuMaterials.Fields("ucmDescription").value = "None Given"
	Else
		rsuMaterials.Fields("ucmDescription").value = LEFT(Description, 50)
	End If
End Function
			
Private Function UpdateMaterialsRecords(ByRef rsuMaterials)	
	On Error Resume Next
	App.BeginTransaction
	
	rsuMaterials.UpdateBatch
	
	If Err.Number = 0 Then
		App.CommitTransaction
		UpdateMaterialsRecords = True
	Else
		App.ErrorMsg Err.Description, "Cabinet Vision BOM Import - Import Materials", Err.Number
		App.RollbackTransaction
		UpdateMaterialsRecords = False
	End If
	
	On Error Goto 0
End Function
			
Private Function GetUnitOfIssues()
	Set rsuUnitOfIssue = CreateObject("ADODB.RecordSet")
	rsuUnitOfIssue.Open _ 
		"	SELECT uciUnitOfIssueID, uciCabinetVisionID, uciQuantityFormula " & _
		"	FROM   uUnitOfIssue ", _ 
		Connection, adOpenStatic, adLockBatchOptimistic, adCmdText
	
	Set GetUnitOfIssues = rsuUnitOfIssue
End Function
			
Public Function CreateProjectQuoteLines(QuoteID, ProjectID, ProjectAreaID, ImportType)
	
	CreateProjectAreaAssembly ProjectID, ProjectAreaID
	QuoteLines = Array()
	
	Set rsRoomList = GetRoomList()
	Do While Not rsRoomList.EOF
		QuoteLineID = GetQuoteLineForRoom(QuoteID, ProjectID, ProjectAreaID, rsRoomList.Fields("RoomName").Value)
		If cInt(QuoteLineID) <> 0 then 
			DeleteQuoteLineDetails QuoteID, QuoteLineID
		Else
			QuoteLineID = CreateQuoteLineItem(QuoteID, Array(1), ProjectID, _
			                                  ProjectAreaID, "ROOM", rsRoomList.Fields("RoomName").Value)
		End If
			
		ImportRoomID QuoteID, QuoteLineID, rsRoomList.Fields("RoomNumber").Value, ImportType
		Redim Preserve QuoteLines(uBound(QuoteLines) + 1)
		QuoteLines(uBound(QuoteLines)) = QuoteLineID
		
		rsRoomList.MoveNext
	Loop
	
	'No longer need to calculate assembly cost manually because M1 does it for us.
	'CalculateAssemblies QuoteID
	
	If uBound(ErrorMessages) >= 0 Then
		Msgbox "Quote " & trim(controls("txtQmpQuoteID").value) & vbnewline & _
					 "Parts not found:" & vbnewline & vbnewline & _
					  Join(ErrorMessages, vbNewLine), vbInformation + vbOKOnly, "Import Errors"         
	End If
	CreateProjectQuoteLines = QuoteLines
End Function
		
Private Function CreateProjectAreaAssembly(ProjectID, ProjectAreaID)
	If Trim(ProjectID) <> "" Then
		If Not DoesProjectAreaExist(ProjectID, ProjectAreaID) Then
			If Not DoesProjectExist(ProjectID) Then
				CreateProject ProjectID, "Imported Project"
			End If
			CreateProjectArea ProjectID, ProjectAreaID, "Phase " & Trim(ProjectAreaID)
		End If
	End If
End Function
		
Private Function DoesProjectAreaExist(ProjectID, ProjectAreaID)
	DoesProjectAreaExist = Not Connection.Execute( _ 
																								"	SELECT 1 " & _
																								"	FROM   ProjectAreas " & _
																								"	WHERE  praProjectID = " & App.Convert.StringToSql(ProjectID) & _
																								"	       AND praProjectAreaID = " & App.Convert.StringToSql(ProjectAreaID)).EOF
End Function
		
Private Function DoesProjectExist(ProjectID)
	DoesProjectExist = Not Connection.Execute( _ 
																						"	SELECT 1 " & _
																						"	FROM   Projects " & _
																						"	WHERE  prpProjectID = " & App.Convert.StringToSql(ProjectID)).EOF
End Function
		
Private Function CreateProject(ProjectID, ProjectDescription)
 Set rsProjects = CreateObject("ADODB.RecordSet")
 rsProjects.Open _
		" SELECT * " & _
		" FROM   Projects " & _
		" WHERE  0 = 1", _
		Connection, adOpenStatic, adLockBatchOptimistic, adCmdText
 rsProjects.AddNew
 rsProjects.Fields("prpProjectID").value = LEFT(ProjectID, 10)
 rsProjects.Fields("prpProjectDate").value = Date()
 rsProjects.Fields("prpShortDescription").value = LEFT(ProjectDescription, 50)
 rsProjects.Fields("prpCreatedBy").value = App.UserID
 rsProjects.Fields("prpCreatedDate").value = Now()
 rsProjects.UpdateBatch
End Function
		
Private Function CreateProjectArea(ProjectID, ProjectAreaID, ProjectDescription)
 Set rsProjectAreas = CreateObject("ADODB.RecordSet")
 rsProjectAreas.Open _
		" SELECT * " & _
		" FROM   ProjectAreas " & _
		" WHERE  0 = 1", _
		Connection, adOpenStatic, adLockBatchOptimistic, adCmdText
 rsProjectAreas.AddNew
 rsProjectAreas.Fields("praProjectID").value = LEFT(ProjectID, 10)
 rsProjectAreas.Fields("praProjectAreaID").value = LEFT(ProjectAreaID, 15)
 rsProjectAreas.Fields("praDescription").value = LEFT(ProjectDescription, 50)
 rsProjectAreas.Fields("praCreatedBy").value = App.UserID
 rsProjectAreas.Fields("praCreatedDate").value = Now()
 rsProjectAreas.UpdateBatch
End Function
		
Private Function GetRoomList()
	Set GetRoomList = ReportDBConnection.Execute( _
																								"	SELECT * " & _
																								"	FROM   Rooms")
End Function
		
Private Function GetQuoteLineForRoom(QuoteID, ProjectID, ProjectAreaID, RoomName)
	Set rsQuoteLines = Connection.Execute( _
																				"	SELECT qmlQuoteLineID " & _
																				"	FROM   QuoteLines " & _
																				"	WHERE  qmlQuoteID =" & App.Convert.StringToSql(QuoteID) & _
																				"	       AND qmlProjectID = " & App.Convert.StringToSql(ProjectID) & _
																				"	       AND qmlProjectAreaID = " & App.Convert.StringToSql(ProjectAreaID) & _
																				"	       AND qmlPartShortDescription = " & App.Convert.StringToSql(RoomName))
	If rsQuoteLines.EOF Then 
		GetQuoteLineForRoom = 0
	Else
		GetQuoteLineForRoom = cInt(rsQuoteLines.Fields("qmlQuoteLineID").Value)
	End If
End Function
		
Private Function DeleteQuoteLineDetails(QuoteID, QuoteLineID)
	Connection.Execute _
		"	DELETE QuoteAssemblies " & _
		"	WHERE  qmaQuoteID = " & App.Convert.StringToSql(QuoteID) & _
		"	       AND qmaQuoteLineID = " & App.Convert.NumberToSql(QuoteLineID) & _
		"	       AND qmaQuoteAssemblyID <> 0"
	
	Connection.Execute _
		"	DELETE QuoteOperations " & _
		"	WHERE  qmoQuoteID = " & App.Convert.StringToSql(QuoteID) & _
		"	       AND qmoQuoteLineID = " & App.Convert.NumberToSql(QuoteLineID) 
	
	Connection.Execute _
		"	DELETE QuoteMaterials " & _
		"	WHERE  qmmQuoteID = " & App.Convert.StringToSql(QuoteID) & _
		"	       AND qmmQuoteLineID = " & App.Convert.NumberToSql(QuoteLineID) 
	Connection.Execute _
		"	DELETE uQuoteAssemblyCosts " & _
		"	WHERE  uqcQuoteID = " & App.Convert.StringToSql(QuoteID) & _
		"	       AND uqcQuoteLineID = " & App.Convert.NumberToSql(QuoteLineID) 
End Function
		
Private Function ImportRoomID(QuoteID, QuoteLineID, RoomID, ImportType)
	Select Case ImportType
		CASE IMPORT_TO_ROOM
			QuoteAssemblyID = 0
			QuoteMaterialID = 1
			
			ImportRoom QuoteID, QuoteLineID, QuoteAssemblyID, QuoteMaterialID, RoomID, ImportType
		
			ImportAccessories QuoteID, QuoteLineID, QuoteAssemblyID, QuoteMaterialID, RoomID	
'		
			QuoteAssemblyID = 1
			ImportMouldingAssemblies QuoteID, QuoteLineID, QuoteAssemblyID, RoomID
			ImportMouldingMaterials QuoteID, QuoteLineID, 0, RoomID
			ImportTopsTable QuoteID, QuoteLineID, 0, RoomID
		
		CASE IMPORT_TO_CABINET
'			import into cabinet assemblies
			QuoteAssemblyID = 1
			QuoteMaterialID = 1
		
			ImportCabinets QuoteID, QuoteLineID, QuoteAssemblyID, RoomID, ImportType
			ImportAccessories QuoteID, QuoteLineID, QuoteAssemblyID, QuoteMaterialID, RoomID	
			ImportMouldingAssemblies QuoteID, QuoteLineID, QuoteAssemblyID, RoomID
			ImportMouldingMaterials QuoteID, QuoteLineID, 0, RoomID
			ImportTopsTable QuoteID, QuoteLineID, 0, RoomID
		case else
			msgbox "No import type"
	End Select
End Function
		
Private Function ImportRoom (ByVal QuoteID, ByVal QuoteLineID, ByRef QuoteAssemblyID, ByRef QuoteMaterialID, ByVal RoomID, ByVal ImportType)
	Set rsQuoteOperations = GetQuoteOperations()
	Set rsQuoteMaterials = GetQuoteMaterials()
	
	ImportQuoteOperations rsQuoteOperations, QuoteID, QuoteLineID, _
					              QuoteAssemblyID, RoomID, 0, ImportType
	rsQuoteOperations.UpdateBatch
	
	ImportQuoteMaterials rsQuoteMaterials, QuoteID, QuoteLineID, _
					              QuoteAssemblyID, QuoteMaterialID, RoomID, 0, ImportType
	rsQuoteMaterials.UpdateBatch
	
End Function
		
Private Function ImportCabinets(ByVal QuoteID, ByVal QuoteLineID, ByRef QuoteAssemblyID, ByVal RoomID, ByVal ImportType)
	Const CABINET_TYPE = 8
	Set rsCabinets = GetCabinets(RoomID)
	
	Set rsQuoteAssemblies = GetQuoteAssemblies()
	Set rsQuoteOperations = GetQuoteOperations()
	Set rsQuoteMaterials = GetQuoteMaterials()
	
	
	
	Do While Not rsCabinets.EOF
		
		QuoteMaterialID = 1
		
		CabinetPartID = CabinetBuilderPartIDTranslation(rsCabinets.Fields("CvcAsmID").Value, CABINET_TYPE)
		If Trim(CabinetPartID(0)) <> "" Then
			CreateQuoteAssemblies rsQuoteAssemblies, QuoteID, QuoteLineID, _
			                      QuoteAssemblyID, CabinetPartID(0), CabinetPartID(1), _
		                        rsCabinets.Fields("Cabinet Name").Value, _
			                      JoinMap(rsCabinets, CreateQuoteAssemblyLongDescriptionMap()), _
			                      rsCabinets.Fields("Quantity").Value, rsCabinets.Fields("RoomNumber").Value, _
			                      rsCabinets.Fields("RoomName").Value
			
			rsQuoteAssemblies.UpdateBatch
			
			ImportQuoteOperations rsQuoteOperations, QuoteID, QuoteLineID, _
			                      QuoteAssemblyID, RoomID, rsCabinets.Fields("Cabinet ID").Value, ImportType

			rsQuoteOperations.UpdateBatch
			
			ImportQuoteMaterials rsQuoteMaterials, QuoteID, QuoteLineID, _
			                     QuoteAssemblyID, QuoteMaterialID, RoomID, rsCabinets.Fields("Cabinet ID").Value, ImportType
			
			rsQuoteMaterials.UpdateBatch
			QuoteAssemblyID = QuoteAssemblyID + 1
		Else 
			AddErrorMessage Trim(rsCabinets.Fields("Cabinet Name").Value) & ", " & Trim(rsCabinets.Fields("RoomName").Value) & _
											", Cab #" & Trim(rsCabinets.Fields("Cabinet ID").Value) & _
											", ID " & Trim(rsCabinets.Fields("CvcAsmID").Value)
		End If
		rsCabinets.MoveNext()
	loop
End Function
			
Private Function GetCabinets(RoomID)
	Set GetCabinets = ReportDBConnection.Execute("	SELECT * " & _
												 											"	FROM   Cabinets " & _
	                                             "         INNER JOIN Rooms " & _
	                                             "                 ON ([Cabinets].[Room ID] = [Rooms].[RoomNumber]) " & _
																							 "	WHERE   [Room ID] = " & App.Convert.NumberToSql(RoomID) & _
												 											"	ORDER BY [Cabinet ID] ")
End Function
			
Private Function CreateQuoteAssemblyLongDescriptionMap()
	DescriptionMap = Array( _
	                        Array("Description", "Description"), _
	                        Array("Width", "Width String"), _
	                        Array("Height", "Height String"), _
	                        Array("Depth", "Depth String"), _
  	                      Array("Left Scribe", "Left Scribe String"), _
	                        Array("Right Scribe", "Right Scribe String"), _
	                        Array("Left End", "Left End"), _
	                        Array("Right End", "Right End"), _
	                        Array("Back", "Back"), _
	                        Array("Toe Height", "Toe Height String"), _
	                        Array("Toe Recess", "Toe Recess String"), _
	                        Array("Comments", "Comment") _
	                      )
	CreateQuoteAssemblyLongDescriptionMap = DescriptionMap
End Function
			
Private Function ImportQuoteOperations(ByRef rsQuoteOperations, ByVal QuoteID, ByVal QuoteLineID, _
	                                     ByVal QuoteAssemblyID, ByVal RoomID, ByVal CabinetID, ByVal ImportType)
'qwe
	app.ax("QuoteFunctions").GetMethod QuoteID, QuoteLineID, QuoteAssemblyID, "ROOM", "", true, false, true, true, true ',,,,,,,,,,))
	
	Set rsLabor = GetAssemblyOperations(RoomID, CabinetID, ImportType)
	set rsQuoteOperations = GetQuoteAssemblyOperations (QuoteID, QuoteLineID, QuoteAssemblyID)
	
	do while not rslabor.EOF
		'an rs.filter should go here
		foundQuoteOperation = false
		do while not rsQuoteOperations.EOF and not foundQuoteOperation
			if cstr(rsQuoteOperations.fields("uqmoCabinetVisionID").value) = cstr(rsLabor.fields("Part ID").value) then
				foundQuoteOperation = true
				rsQuoteOperations.fields("qmoProductionStandard").value = cdbl(rsQuoteOperations.fields("qmoProductionStandard").value) _
																																	+ cdbl(rsLabor.fields("ProductionStandard").value)
				rsQuoteOperations.fields("uqmoImported").value = true
			end if

			rsQuoteOperations.movenext
		loop

		if rsQuoteOperations.EOF and not foundQuoteOperation then
			AddErrorMessage "Operation for CV Labor ID " & Trim(rsLabor.Fields("Part ID").Value) & " not found."
		end if
		
		rsQuoteOperations.movefirst

		rsLabor.movenext
	loop

'  since we're using Get Part Method, we don't need to manually create the operations
'	OperationID = 10
'	
'	Do While Not rsLabor.EOF
'		If DoesWorkCenterIDExist(rsLabor.Fields("Part ID").Value) Then
'				CreateQuoteOperation rsQuoteOperations, QuoteID, QuoteLineID, QuoteAssemblyID, _
'			                       OperationID, rsLabor.Fields("Part ID").Value, rsLabor.Fields("ProductionStandard").Value
'		Else
'			AddErrorMessage "Workcenter ID " & Trim(rsLabor.Fields("Part ID").Value) & " not found."
'		End If
'		
'		OperationID = OperationID + 10
'		rsLabor.MoveNext
'	Loop
End Function
			
Private Function GetAssemblyOperations(RoomID, CabinetPartID, ImportType)
	
	select case ImportType 
		Case IMPORT_TO_ROOM
			CabinetWhereClause = "1=1"
			RoomWhereClause = "Cabinets.[Room ID] = " & App.Convert.NumberToSql(RoomID)
		Case IMPORT_TO_Cabinet
			CabinetWhereClause = "Parts.[Cabinet ID] = " & App.Convert.NumberToSql(CabinetPartID)
			RoomWhereClause = "1=1"
	end select

	set GetAssemblyOperations = ReportDBConnection.Execute("	SELECT  [Part ID], Count(*) AS ProductionStandard" & _
																												 "	FROM    Parts " & _
																												 "	INNER JOIN Cabinets on (Parts.[Cabinet ID] = Cabinets.[Cabinet ID]) " & _
																						             "	WHERE " & RoomWhereClause & _
																												 "					AND " & CabinetWhereClause & _
																						             "          AND Parts.Description LIKE '%Labor%' " & _
																												 "	GROUP BY Parts.[Part ID], Parts.[Description] " & _
																						             "	ORDER BY Parts.Description ")
			
End Function	
				
Private Function DoesWorkcenterIDExist(WorkcenterID)
	DoesWorkcenterIDExist = Not Connection.Execute("	SELECT 1 " & _
		                                             "	FROM   WorkCenters " & _
		                                             "	WHERE  xawWorkCenterID = " & App.Convert.StringToSql(WorkcenterID)).EOF
End Function
			
Private Function GetQuoteAssemblyOperations (QuoteID, QuoteLineID, QuoteAssemblyID)
	set rsQuoteOperations = createobject("adodb.recordset")
	rsQuoteOperations.open	"	Select * " & _
													"	from QuoteOperations " & _
													"	where qmoQuoteID = " & app.convert.StringToSql(QuoteID) & _
													"		and qmoQuoteLineID = " & app.convert.StringToSql(QuoteLineID) & _
													"		and qmoQuoteAssemblyID = " & app.convert.StringToSql(QuoteAssemblyID), _
													Connection, adOpenStatic, adLockBatchOptimistic, adCmdText
	
	set GetQuoteAssemblyOperations = rsQuoteOperations
	
end function
			
Private Function ImportQuoteMaterials(ByRef rsQuoteMaterials, ByVal QuoteID, ByVal QuoteLineID, _
	                                    ByVal QuoteAssemblyID, ByRef QuoteMaterialID, ByVal RoomID, _
																			ByVal CabinetID, ImportType)
	'QuoteMaterialID = 1
	Set rsUnitOfIssue = GetUnitOfIssues()

	if VERBOSE then 
		msgbox "ImportQuoteMaterials" & vbnewline & _
					 "QuoteID: " & QuoteID & vbnewline & _
					 "QuoteLineID: " & QuoteLineID & vbnewline & _
					 "QuoteAssemblyID: " & QuoteAssemblyID & vbnewline & _
					 "QuoteMaterialID: " & QuoteMaterialID & vbnewline
	end if
	ImportMaterialsTable rsQuoteMaterials, rsUnitOfIssue, QuoteID, _
											 QuoteLineID, QuoteAssemblyID, QuoteMaterialID, _
											 RoomID, CabinetID, ImportType
	ImportDoorsTable rsQuoteMaterials, rsUnitOfIssue, QuoteID, _
									 QuoteLineID, QuoteAssemblyID, QuoteMaterialID, _
									 RoomID, CabinetID, ImportType
	ImportDrawersTable rsQuoteMaterials, rsUnitOfIssue, QuoteID, _
										 QuoteLineID, QuoteAssemblyID, QuoteMaterialID, _
									 	RoomID, CabinetID, ImportType
	ImportRollOutTable rsQuoteMaterials, rsUnitOfIssue, QuoteID, _
										 QuoteLineID, QuoteAssemblyID, QuoteMaterialID, _
									 	RoomID, CabinetID, ImportType
End Function
			
Private Function ImportMaterialsTable(ByRef rsQuoteMaterials, ByRef rsUnitOfIssue, ByVal QuoteID, _
	                                    ByVal QuoteLineID, ByVal QuoteAssemblyID, ByRef QuoteMaterialID, _
	                                    ByVal RoomID, ByVal CabinetID, ByVal ImportType)
	'asdf
	Set rsCabinetMaterials = GetAssemblyMaterials(RoomID, CabinetID, ImportType)

	Const MATERIAL_TYPE = 1
	Do While Not rsCabinetMaterials.EOF 
			if VERBOSE then	
				msgbox "ImportMaterialsTable loop " & vbnewline & _
					 "QuoteID: " & QuoteID & vbnewline & _
					 "QuoteLineID: " & QuoteLineID & vbnewline & _
					 "QuoteAssemblyID: " & QuoteAssemblyID & vbnewline & _
					 "QuoteMaterialID: " & QuoteMaterialID & vbnewline
			end if

		PartKeys = CabinetBuilderPartIDTranslation(rsCabinetMaterials.Fields("Material ID").Value, MATERIAL_TYPE)
		
		If Trim(PartKeys(0)) <> "" then
'			rsUnitOfIssue.filter ("uciUnitOfIssueID = " & App.Convert.NumberToSql(PartKeys(2)))

			' This is a hack
			' but I could not for the life of me get the above rs.filter to work. 
			' This appears to be an issue with M1v9?
			found = FALSE
			rsUnitOfIssue.MoveFirst
			do while not found and not rsUnitOfIssue.EOF
				if rsUnitOfIssue.fields("uciUnitOfIssueID").value = PartKeys(2) THEN
					found = TRUE
					exit do
				end if
				rsUnitOfIssue.MoveNext
			Loop
			' end hack

			Set rsCVMaterials = GetCVMaterials(rsCabinetMaterials.Fields("Material ID").Value)
			Set rsCVSheet = GetCVSheet(rsCVMaterials.Fields("Sheet").Value)
			
			If Not rsUnitOfIssue.EOF Then
				QuantityPerAssembly = CalculateQuantityPerAssembly(rsCVMaterials, rsCVSheet, rsCabinetMaterials, _
				                                                   rsUnitOfIssue.Fields("uciQuantityFormula").Value)
			Else
				msgbox "No UOI found"
				QuantityPerAssembly = 0
			End If
			
			if rsCabinetMaterials.Fields("Part ID").Value = 68 or rsCabinetMaterials.Fields("Part ID").Value = 101 then
				'CV part is a Pull
				ShortDescription = rsCabinetMaterials.Fields("Description").Value & " Pull"
				FilterByName = TRUE
			else
				ShortDescription = ""	
				FilterByName = FALSE
			end if
				
			If CreateQuoteMaterialsWithQuantityFormula(rsQuoteMaterials, QuoteID, QuoteLineID, _
				                                         QuoteAssemblyID, QuoteMaterialID, PartKeys(0), _
				                                         PartKeys(1), QuantityPerAssembly, ShortDescription, LongDescription, _
				                                         True, 0, True, FilterByName) Then
				QuoteMaterialID = QuoteMaterialID + 1
			End If
			
		Else
			set CVMaterial = GetCVMaterials(rsCabinetMaterials.Fields("Material ID").Value)	
			AddErrorMessage trim(CVMaterial.fields("Name").value) & ", " & _
												GetRoomNameFromCabinetID (CabinetID) & ", Cab #" & _
												CabinetID & ", ID " & trim(CVMaterial.fields("ID").value) 
		End If
		
		rsCabinetMaterials.MoveNext
	Loop
End Function
				
Private Function GetAssemblyMaterials(RoomID, CabinetID, ImportType)
	
	select case ImportType 
		Case IMPORT_TO_ROOM
			CabinetWhereClause = "1=1"
			RoomWhereClause = "Cabinets.[Room ID] = " & App.Convert.NumberToSql(RoomID)
		Case IMPORT_TO_CABINET
			CabinetWhereClause = "Parts.[Cabinet ID] = " & App.Convert.NumberToSql(CabinetID)
			RoomWhereClause = "1=1"
	end select
	
	Set GetAssemblyMaterials = ReportDBConnection.Execute("	SELECT  Parts.* " & _
																												"	FROM		Parts " & _
																												"	INNER JOIN Cabinets on (Parts.[Cabinet ID] = Cabinets.[Cabinet ID]) " & _
	                                                      "	WHERE " & RoomWhereClause & _
																												"					AND " & CabinetWhereClause & _
	                                                      "          AND Parts.Description NOT LIKE '%Labor%' " & _
																												"					AND Parts.[Material ID] > 0 "& _
													                              "	        AND Parts.BuyOut = False ")
End Function
				
Private Function ImportDoorsTable(ByRef rsQuoteMaterials, ByRef rsUnitOfIssue, ByVal QuoteID, _
	                                ByVal QuoteLineID, ByVal QuoteAssemblyID, ByRef QuoteMaterialID, _
	                                ByVal RoomID, ByVal CabinetID, ByVal ImportType)
	Set rsDoors = GetAssemblyDoors(RoomID, CabinetID, ImportType)
	Const DOOR_TYPE = 3
	
	Do While Not rsDoors.EOF 
		GenerateQuoteMaterials rsQuoteMaterials, rsDoors.Fields("Door Num").Value, DOOR_TYPE, "Door ID", _
	                         rsDoors.Fields("Cost").Value, rsDoors, CreateDoorMaterialLongDescriptionMap(), _
		                       QuoteID, QuoteLineID, QuoteAssemblyID, QuoteMaterialID, _
													rsDoors.Fields("QuantityPerAssembly").Value, False
		rsDoors.MoveNext
	Loop
End Function
				
Private Function GetAssemblyDoors(RoomID, CabinetID, ImportType)
	
	select case ImportType 
		Case IMPORT_TO_ROOM
			CabinetWhereClause = "1=1"
			RoomWhereClause = "Cabinets.[Room ID] = " & App.Convert.NumberToSql(RoomID)
		Case IMPORT_TO_CABINET
			CabinetWhereClause = "Parts.[Cabinet ID] = " & App.Convert.NumberToSql(CabinetID)
			RoomWhereClause = "1=1"
	end select

	Set GetAssemblyDoors = ReportDBConnection.Execute("	SELECT   Doors.[Material Schedule] " & _
																										"					,Doors.[Finger Pull] " & _
																										"					,Doors.[Edge Profile] " & _
																										"					,Doors.[Raised Panel Detail] " & _
																										"					,Doors.[Height String] " & _
																										"					,Doors.[Width String] " & _
																										"					,Doors.Cost " & _
																										"					,Doors.[Door Num] " & _
																										"					,count(Doors.[Cabinet ID]) as QuantityPerAssembly " & _
							          	 												 "	FROM    (Doors " & _
																										"	        LEFT JOIN  Parts " & _
																										"	                ON (Doors.[Door ID] = Parts.[Door ID] " & _
																										"	                    AND Parts.BuyOut = True)) " & _
																										"					LEFT JOIN Cabinets " & _
																										"									ON Doors.[Cabinet ID] = Cabinets.[Cabinet ID] " & _
	                                                  "	WHERE " & RoomWhereClause & _
																										"					AND " & CabinetWhereClause & _
																										"          AND Parts.[Door ID] IS NOT NULL " & _
																										"	GROUP BY Doors.[Door Num] " & _
																										"					,Doors.[Material Schedule] " & _
																										"					,Doors.[Finger Pull] " & _
																										"					,Doors.[Edge Profile] " & _
																										"					,Doors.[Raised Panel Detail] " & _
																										"					,Doors.[Height String] " & _
																										"					,Doors.[Width String] " & _
																										"					,Doors.Cost" )
End Function
				
Private Function CreateDoorMaterialLongDescriptionMap()
	DescriptionMap = Array( _
													Array("Material Schedule", "Material Schedule"), _
													Array("Outside Edge", "Finger Pull"), _
													Array("SR Profile", "Edge Profile"), _
													Array("Panel Profile", "Raised Panel Detail"), _
													Array("Height", "Height String"), _
													Array("Width", "Width String") _
	                      )
	CreateDoorMaterialLongDescriptionMap = DescriptionMap
End Function
				
Private Function ImportDrawersTable(ByRef rsQuoteMaterials, ByRef rsUnitOfIssue, ByVal QuoteID, _
	                                	ByVal QuoteLineID, ByVal QuoteAssemblyID, ByRef QuoteMaterialID, _
	                                	ByVal RoomID, ByVal CabinetID, ByVal ImportType)

	Set rsDrawers = GetAssemblyDrawers(RoomID, CabinetID, ImportType)
	Const DRAWER_TYPE = 4
	
	Do While Not rsDrawers.EOF
		GenerateQuoteMaterials rsQuoteMaterials, rsDrawers.Fields("Drawer Num").Value, DRAWER_TYPE, "Drawer ID", _
	                         rsDrawers.Fields("Cost").Value, rsDrawers, CreateQuoteMaterialPurchasedDrawersLongDescriptionMap, _
		                       QuoteID, QuoteLineID, QuoteAssemblyID, QuoteMaterialID, _
													 rsDrawers.Fields("QuantityPerAssembly").Value, False
		rsDrawers.MoveNext
	Loop
End Function
				
Private Function GetAssemblyDrawers(RoomID, CabinetID, ImportType)

	select case ImportType 
		Case IMPORT_TO_ROOM
			CabinetWhereClause = "1=1"
			RoomWhereClause = "Cabinets.[Room ID] = " & App.Convert.NumberToSql(RoomID)
		Case IMPORT_TO_CABINET
			CabinetWhereClause = "Parts.[Cabinet ID] = " & App.Convert.NumberToSql(CabinetID)
			RoomWhereClause = "1=1"
	end select
	
	Set GetAssemblyDrawers = ReportDBConnection.Execute("	SELECT  Drawers.[MaterialSchedule] " & _
							          	 									  			 "					,Drawers.[Height String] " & _
								          	 									  		 "					,Drawers.[Drawer Num] " & _
							          	 									  			 "					,Drawers.[Depth String] " & _
							          	 									  			 "					,Drawers.[Width String] " & _
							          	 									  			 "					,NoteTable.DrawerCode " & _
							          	 									  			 "					,Drawers.Cost " & _
																											"					,count(Drawers.[Cabinet ID]) as QuantityPerAssembly " & _
							          	 									  			 "	FROM    ((Drawers " & _
							          	 									  			 "	LEFT JOIN Cabinets ON (Drawers.[Cabinet ID] = Cabinets.[Cabinet ID])) " & _
							          	 									  			 "	LEFT JOIN parts ON (drawers.[drawer id] = parts.[drawer id] AND parts.buyout = TRUE)) " & _
							          	 									  			 "	LEFT JOIN ( " & _
																											"							select left(note,255) as DrawerCode " & _
																											"										,ParentID " & _
																											"							from notes " & _
																											"							where ParentType = 6 " & _
																											"								and Prompt = '" & cstr("_DWRCode") & "'" & _
																											"						) NoteTable " & _ 
																											"				ON drawers.[Drawer ID] = NoteTable.[ParentID] " & _
		                                                  "	WHERE " & RoomWhereClause & _
																											"					AND " & CabinetWhereClause & _
																											"					AND parts.[drawer id] IS NOT NULL" & _
																											"	GROUP BY Drawers.[Drawer Num] " & _
																											"					,Drawers.[MaterialSchedule] " & _
																											"					,Drawers.[Height String] " & _
																											"					,Drawers.[Depth String] " & _
																											"					,Drawers.[Width String] " & _
																											"					,Drawers.[Cost] " & _
																											"					,NoteTable.DrawerCode")
End Function
				
Private Function CreateQuoteMaterialPurchasedDrawersLongDescriptionMap()
	DescriptionMap = Array( _
	                        Array("Material Schedule", "MaterialSchedule"), _
													Array("Drawer Code", "DrawerCode"), _
													Array("Width", "Width String"), _
	                        Array("Height", "Height String"), _
	                        Array("Depth", "Depth String") _
	                      )
	
	CreateQuoteMaterialPurchasedDrawersLongDescriptionMap = DescriptionMap
End Function
				
Private Function ImportRollOutTable(ByRef rsQuoteMaterials, ByRef rsUnitOfIssue, ByVal QuoteID, _
	                                	ByVal QuoteLineID, ByVal QuoteAssemblyID, ByRef QuoteMaterialID, _
	                                	ByVal RoomID, ByVal CabinetID, ByVal ImportType)
	Set rsRollouts = GetAssemblyRollOuts(RoomID, CabinetID, ImportType)
	Const ROLLOUT_TYPE = 5
	
	Do While Not rsRollouts.EOF
		GenerateQuoteMaterials rsQuoteMaterials, rsRollouts.Fields("RollOut Num").Value, ROLLOUT_TYPE, "RollOut ID", _
	                         rsRollouts.Fields("Cost").Value, rsRollouts, CreateQuoteMaterialRollOutLongDescriptionMap, _
		                       QuoteID, QuoteLineID, QuoteAssemblyID, QuoteMaterialID, _
													 rsRollouts.fields("QuantityPerAssembly").value, False
		rsRollouts.MoveNext
	Loop
End Function
				
Private Function CreateQuoteMaterialRollOutLongDescriptionMap()
	DescriptionMap = Array( _
	                        Array("Width", "Width String"), _
	                        Array("Height", "Height String"), _
	                        Array("Depth", "Depth String") _ 
	                      )
	
	CreateQuoteMaterialRollOutLongDescriptionMap = DescriptionMap
End Function
				
Private Function GetAssemblyRollOuts(RoomID, CabinetID, ImportType)
	
		select case ImportType 
		Case IMPORT_TO_ROOM
			CabinetWhereClause = "1=1"
			RoomWhereClause = "Cabinets.[Room ID] = " & App.Convert.NumberToSql(RoomID)
		Case IMPORT_TO_CABINET
			CabinetWhereClause = "Parts.[Cabinet ID] = " & App.Convert.NumberToSql(CabinetID)
			RoomWhereClause = "1=1"
	end select

	Set GetAssemblyRollOuts = ReportDBConnection.Execute("	SELECT  Rollouts.[MaterialSchedule] " & _
							          	 									  			 "					,Rollouts.[Height String] " & _
								          	 									  		 "					,Rollouts.[Rollout Num] " & _
							          	 									  			 "					,Rollouts.[Depth String] " & _
							          	 									  			 "					,Rollouts.[Width String] " & _
							          	 									  			 "					,NoteTable.RolloutCode " & _
							          	 									  			 "					,Rollouts.Cost " & _
																											"					,count(Rollouts.[Cabinet ID]) as QuantityPerAssembly " & _
							          	 									  			 "	FROM    ((Rollouts " & _
							          	 									  			 "	LEFT JOIN Cabinets ON (Rollouts.[Cabinet ID] = Cabinets.[Cabinet ID])) " & _
							          	 									  			 "	LEFT JOIN parts ON (Rollouts.[Rollout id] = parts.[Rollout id] AND parts.buyout = TRUE)) " & _
							          	 									  			 "	LEFT JOIN ( " & _
																											"							select left(note,255) as RolloutCode " & _
																											"										,ParentID " &  _
																											"							from notes " & _
																											"							where ParentType=7 " & _
																											"								and Prompt = '" & cstr("_pulloutCode") & "'" & _
																											"						) NoteTable " & _ 
																											"				ON rollouts.[rollout ID] = NoteTable.[ParentID] " & _
		                                                  "	WHERE " & RoomWhereClause & _
																											"					AND " & CabinetWhereClause & _
																											"					AND parts.[rollout id] IS NOT NULL" & _
																											"	GROUP BY Rollouts.[Rollout Num] " & _
																											"					,Rollouts.[MaterialSchedule] " & _
																											"					,Rollouts.[Height String] " & _
																											"					,Rollouts.[Depth String] " & _
																											"					,Rollouts.[Width String] " & _
																											"					,Rollouts.[Cost] " & _
																											"					,NoteTable.RolloutCode")
	
End Function
				
Private Function ImportAccessories(ByVal QuoteID, ByVal QuoteLineID, ByVal QuoteAssemblyID, ByVal QuoteMaterialID, ByVal RoomID)
	Set rsAccessories = GetAccessoriesFromReport(RoomID)
	Set rsQuoteMaterials = GetQuoteMaterials()
	Const ACCESSORIES_TYPE = 2
	
	'QuoteMaterialID = 100
	
	Do While Not rsAccessories.EOF 
		MaterialPartID = CabinetBuilderPartIDTranslation(rsAccessories.Fields("AAssemblyID").Value, ACCESSORIES_TYPE)
		'app.DebugLog "ACCESSORIES - " & Join(MaterialPartID, "|"), DEBUG_MODE
		If App.Ax("PartFunctions").DoesPartRevisionExist(MaterialPartID(0), MaterialPartID(1)) Then
			
			CreateQuoteMaterialsWithQuantityFormula rsQuoteMaterials, QuoteID, QuoteLineID, _
																								 0, QuoteMaterialID, MaterialPartID(0), _
																								 MaterialPartID(1), rsAccessories.Fields("AQuantity").Value, "", _
																								 "", False, rsAccessories.Fields("AList Price").Value, False, False
			QuoteMaterialID = QuoteMaterialID + 1
		Else 
			AddErrorMessage Trim(rsAccessories.Fields("Access").Value) & ", " & Trim(rsAccessories.Fields("RoomName").Value) & ", Cab #" & _
											Trim(rsAccessories.Fields("ACabinet ID").Value) & ", ID " & Trim(rsAccessories.Fields("AAssemblyID").Value)
		end if
		rsAccessories.MoveNext()
	loop
	
	rsQuoteMaterials.UpdateBatch
End Function
			
Private Function GetAccessoriesFromReport(ByVal RoomID)
	Set GetAccessoriesFromReport = ReportDBConnection.Execute("	SELECT AAssemblyID, RoomNumber, RoomName, " & _
	                                                          "	       AQuantity, [AList Price], Access, [ACabinet ID] " & _
	                                                          "	FROM   Accessories " & _
                                                            "         INNER JOIN Rooms " & _
	                                                          "	               ON (Accessories.ARoom = Rooms.RoomNumber) " & _
			                                                      "	WHERE  [ACatalog Name] = 'Accessories.cvc'" & _
																														"	       AND ARoom = " & App.Convert.NumberToSql(RoomID))
End Function
			
Private Function ImportMouldingAssemblies(ByVal QuoteID, ByVal QuoteLineID, ByRef QuoteAssemblyID, ByVal RoomID)
	Set rsMoulding = GetMouldings(RoomID)
	Set rsQuoteAssemblies = GetQuoteAssemblies()
	Const MOULDING_TYPE = 7
	
	Do While Not rsMoulding.EOF
		MouldingPartID = CabinetBuilderPartIDTranslation(Trim(rsMoulding.Fields("ProfileID").Value) & _
		                                                 Trim(rsMoulding.Fields("Material ID").Value), MOULDING_TYPE)
		If App.Ax("PartFunctions").DoesPartRevisionExist(MouldingPartID(0), MouldingPartID(1)) Then
			If IsManufactured(MouldingPartID(0)) Then
				CreateQuoteAssemblies rsQuoteAssemblies, QuoteID, QuoteLineID, _
			                      	QuoteAssemblyID, MouldingPartID(0), MouldingPartID(1), "", "", _
				                      cDbl(rsMoulding.Fields("LinealTotal").Value) / 12, _
				                      rsMoulding.Fields("RoomNumber").Value, rsMoulding.Fields("RoomName").Value
				rsQuoteAssemblies.UpdateBatch
				App.Ax("QuoteFunctions").GetMethod QuoteID, QuoteLineID, QuoteAssemblyID, MouldingPartID(0), MouldingPartID(1), True
				QuoteAssemblyID = QuoteAssemblyID + 1
			End If
		Else
			AddErrorMessage GetProfileNameFromID(rsMoulding.Fields("ProfileID").Value) & ", " & _
											GetMaterialNameFromID(rsMoulding.Fields("Material ID").Value) & ", " & _
											Trim(rsMoulding.Fields("RoomName").Value) & _
											", Profile " & Trim(Trim(rsMoulding.Fields("ProfileID").Value) & _
											", Material " & Trim(rsMoulding.Fields("Material ID").Value))
				
		End If
		rsMoulding.MoveNext
	Loop
End Function
				
Private Function ImportMouldingMaterials(ByVal QuoteID, ByVal QuoteLineID, ByRef QuoteAssemblyID, ByVal RoomID)
	Set rsMoulding = GetMouldings(RoomID)
	Set rsQuoteMaterials = GetQuoteMaterials()
'	QuoteMaterialID = App.GetNextIDForTable("QuoteMaterials", Array(QuoteID, QuoteLineID, QuoteAssemblyID))
'	QuoteMaterialID = App.GenerateNextIDForTable("QuoteMaterials", Array(QuoteID, QuoteLineID, QuoteAssemblyID))
	QuoteMaterialID = App.Ax("LegacyFunctions").GetNextIDForTable("QuoteMaterials", Array(QuoteID, QuoteLineID, QuoteAssemblyID))
	Const MOULDING_TYPE = 7
	
	Do While Not rsMoulding.EOF
		MouldingPartID = CabinetBuilderPartIDTranslation(Trim(rsMoulding.Fields("ProfileID").Value) & _
		                                                 Trim(rsMoulding.Fields("Material ID").Value), MOULDING_TYPE)
		If App.Ax("PartFunctions").DoesPartRevisionExist(MouldingPartID(0), MouldingPartID(1)) Then
			If Not IsManufactured(MouldingPartID(0)) Then
				If CreateQuoteMaterialsWithQuantityFormula(rsQuoteMaterials, QuoteID, QuoteLineID, _
																									 QuoteAssemblyID, QuoteMaterialID, MouldingPartID(0), _
																									 MouldingPartID(1), cDbl(rsMoulding.Fields("LinealTotal").Value) / 12, "", _
																									 "", True, 0, True, False) Then

					QuoteMaterialID = QuoteMaterialID + 1
				End IF
			End If
		Else
			AddErrorMessage GetProfileNameFromID(rsMoulding.Fields("ProfileID").Value) & ", " & _
											GetMaterialNameFromID(rsMoulding.Fields("Material ID").Value) & ", " & _
											Trim(rsMoulding.Fields("RoomName").Value) & _
											", Profile " & Trim(Trim(rsMoulding.Fields("ProfileID").Value) & _
											", Material " & Trim(rsMoulding.Fields("Material ID").Value))
		End If
		rsMoulding.MoveNext
	Loop
	rsQuoteMaterials.UpdateBatch
End Function
					
Private Function GetMouldings(RoomID)
		SET GetMouldings = ReportDBConnection.Execute("	SELECT ProfileID, [Material ID], " & _
																								"						RoomNumber, RoomName, sum([Lineal Total]) as LinealTotal " & _
	                                              "	FROM   Molding " & _
                                                "         INNER JOIN Rooms " & _
	                                              "	               ON (Molding.[Room ID] = Rooms.[RoomNumber]) " & _
	                                              "	WHERE  Type <> 2 " & _
	                                              "	       AND Type <> 10 " & _
																								"	       AND Molding.[Room ID] = " & App.Convert.NumberToSql(RoomID) & _
																								"	GROUP BY ProfileID, [Material ID], RoomNumber, RoomName ")
End Function
					
Private Function IsManufactured(PartID)
	Manufactured = False
	If App.Ax("PartFunctions").DoesPartExist(PartID) Then
		Const PART_MANUFACTURED = 2
		Manufactured = cInt(Connection.Execute("	SELECT impPartType " & _
		                                       "	FROM   Parts " & _
		                                       "	WHERE  impPartID = " & App.Convert.StringToSql(PartID)).Fields("impPartType").Value) _
											= PART_MANUFACTURED
	End If
	IsManufactured = Manufactured
End Function
					
Private Function ImportTopsTable(ByVal QuoteID, ByVal QuoteLineID, ByVal QuoteAssemblyID, ByVal RoomID)
	Set rsQuoteMaterials = GetQuoteMaterials()
	Set rsPurchasedTops = GetPurchaseTops(RoomID)
	Set rsUnitOfIssue = GetUnitOfIssues()
	
	Const TOPS_TYPE = 6
	
'	QuoteMaterialID = App.GetNextIDForTable("QuoteMaterials", Array(QuoteID, QuoteLineID, QuoteAssemblyID))
'	QuoteMaterialID = App.GenerateNextIDForTable("QuoteMaterials", Array(QuoteID, QuoteLineID, QuoteAssemblyID))
	QuoteMaterialID = App.Ax("LegacyFunctions").GetNextIDForTable("QuoteMaterials", Array(QuoteID, QuoteLineID, QuoteAssemblyID))
	
	Do While Not rsPurchasedTops.EOF 
		PartKeys = CabinetBuilderPartIDTranslation(rsPurchasedTops.Fields("Material ID").Value, TOPS_TYPE)
		If Trim(PartKeys(0)) <> "" Then
			Set rsProfiles = GetProfiles(rsPurchasedTops.Fields("ProfileID").Value)
			Set rsCVMaterials = GetCVMaterials(rsPurchasedTops.Fields("Material ID").Value)
			LongDescription = Join(Array(JoinMap(rsPurchasedTops, CreateQuoteMaterialTopLongDescriptionMap()), _
			                             JoinMap(rsCVMaterials, CreateQuoteMaterialTopLongDescriptionMaterialMap()), _
			                             JoinMap(rsProfiles, CreateQuoteMaterialTopLongDescriptionProfileMap())), _
			                       vbNewLine)
				
			If CreateQuoteMaterialsWithQuantityFormula(rsQuoteMaterials, QuoteID, QuoteLineID, _
			                                         QuoteAssemblyID, QuoteMaterialID, PartKeys(0), _
			                                         PartKeys(1), 1, "", LongDescription, _
			                                         False, rsPurchasedTops.Fields("Cost").Value, False, False) Then
				QuoteMaterialID = QuoteMaterialID + 1
			End If
		Else
			AddErrorMessage GetMaterialNameFromID(rsPurchasedTops.Fields("Material ID").Value) & ", " & _
											GetRoomNameFromID (rsPurchasedTops.Fields("Room ID").Value) & ", " & _
											"Top #" & Trim(rsPurchasedTops.Fields("TopNumber").Value) & _
											", ID " & Trim(rsPurchasedTops.Fields("Material ID").Value)
		End If
		
		rsPurchasedTops.MoveNext
	Loop
	
	rsQuoteMaterials.UpdateBatch
End Function
				
Private Function GetPurchaseTops(ByVal RoomID)
	Set GetPurchaseTops = ReportDBConnection.Execute("	SELECT  Tops.*, Parts.Cost " & _
							           													"	FROM    Tops " & _
																									 "	        INNER JOIN Parts " & _
	                                                 "	                ON Tops.[Top ID] = Parts.[Top ID]" & _
	                                                 "	WHERE   Parts.[Part ID] = 34 " & _
																									 " 				 AND Parts.Cost <> 0" & _
																									 "	        AND Tops.[Room ID] = " & App.Convert.NumberToSql(RoomID))
End Function
				
Private Function CreateQuoteMaterialTopLongDescriptionMap()
	DescriptionMap = Array( _
	                        Array("Countertop Room", "Room ID"), _
	                        Array("Top Number", "TopNumber"), _
	                        Array("Backsplash", "BackSplash", Array( _
	                                                                 Array(True, "Yes"), _
	                                                                 Array(False, "No") _
	                                                               ) _
	                             ), _
	                        Array("Width", "Width String"), _
	                        Array("Length", "Length String"), _
	                        Array("Thickness", "Thick String") _ 
	                      )
	
	CreateQuoteMaterialTopLongDescriptionMap = DescriptionMap
End Function
				
Private Function CreateQuoteMaterialTopLongDescriptionMaterialMap()
	DescriptionMap = Array( _
	                        Array("Material", "Name") _ 
	                      )
	
	CreateQuoteMaterialTopLongDescriptionMaterialMap = DescriptionMap
End Function
				
Private Function CreateQuoteMaterialTopLongDescriptionProfileMap()
	DescriptionMap = Array( _
	                        Array("Profile Name", "Name") _ 
	                      )
	
	CreateQuoteMaterialTopLongDescriptionProfileMap = DescriptionMap
End Function
				
Private Function CalculateAssemblies(ByVal QuoteID)
	DuplicateQuoteAssembliesToQuoteLines QuoteID
	
	App.Ax("Quote").RefreshMatrix("Quotes.qmpQuoteID = " & App.Convert.StringToSql(QuoteID))
	
	CopyQuoteQuantitiesToCustomTable QuoteID
	
	DeleteTemporaryQuoteLines QuoteID
End Function
				
Private Function GetAllQuoteSubAssemblies(QuoteID)
	Set GetAllQuoteSubAssemblies = Connection.Execute( _
													"	SELECT * " & _
													"	FROM   QuoteAssemblies " & _
													"	WHERE  qmaQuoteID = " & App.Convert.StringToSql(QuoteID) & _
													"	       AND uqmaImported <> 0")
End Function
				
Private Sub DuplicateQuoteAssembliesToQuoteLines(QuoteID)
	Set rsQuoteAssemblies = GetAllQuoteSubAssemblies(QuoteID)
	
	Do While Not rsQuoteAssemblies.EOF 
		PartID = "TEMP:" & rsQuoteAssemblies.Fields("qmaQuoteLineID").Value & ":" & _
						 rsQuoteAssemblies.Fields("qmaQuoteAssemblyID").Value
		QuoteLineID = CreateTempQuoteLineItem(QuoteID, Array(rsQuoteAssemblies.fields("qmaQuantityPerParent").Value), PartID, "TEMP")
		App.Ax("QuoteFunctions").GetQuoteMethod QuoteID, QuoteLineID, 0, _
																			 QuoteID, rsQuoteAssemblies.Fields("qmaQuoteLineID").Value, _
																			 True, rsQuoteAssemblies.Fields("qmaQuoteAssemblyID").Value
		rsQuoteAssemblies.MoveNext
	Loop
End Sub
		
Private Sub CopyQuoteQuantitiesToCustomTable(QuoteID)
	Set rsQuoteQuantities = GetTemporaryQuoteQuantities(QuoteID)
	
	QuotingMethod = cInt(App.Props("QM").Fields("xapQMQuotingMethod").Value)
	Const LABOR_OVERHEAD = 2, QUOTING_RATE = 1
	Set rsuQuoteAssemblyCosts = CreateObject("ADODB.RecordSet")
	rsuQuoteAssemblyCosts.Open _ 
		"	SELECT * " & _
		"	FROM   uQuoteAssemblyCosts " & _ 
		"	WHERE  0 = 1", _ 
		Connection, adOpenStatic, adLockBatchOptimistic, adCmdText
	
	Do While Not rsQuoteQuantities.EOF  
		QuoteLineDetails = Split(Trim(rsQuoteQuantities.Fields("qmlPartID").Value), ":")
		rsuQuoteAssemblyCosts.AddNew
		rsuQuoteAssemblyCosts.Fields("uqcQuoteID").value = LEFT(rsQuoteQuantities.Fields("qmqQuoteID").Value, 10)
		rsuQuoteAssemblyCosts.Fields("uqcQuoteLineID").value = cDbl(QuoteLineDetails(1))
		rsuQuoteAssemblyCosts.Fields("uqcQuoteAssemblyID").value = QuoteLineDetails(2)
		rsuQuoteAssemblyCosts.Fields("uqcQuoteAssemblyCostID").value = rsQuoteQuantities.Fields("qmqQuoteQuantityID").Value
		
		Connection.Execute _
			"	DELETE uQuoteAssemblyCosts " & _
			"	WHERE  uqcQuoteID = " & App.Convert.StringToSql(rsuQuoteAssemblyCosts.Fields("uqcQuoteID").value) & _
			"	       AND uqcQuoteLineID = " & App.Convert.NumberToSql(rsuQuoteAssemblyCosts.Fields("uqcQuoteLineID").value) & _
			"	       AND uqcQuoteAssemblyID = " & App.Convert.NumberToSql(rsuQuoteAssemblyCosts.Fields("uqcQuoteAssemblyID").value) & _
			"	       AND uqcQuoteAssemblyCostID = " & App.Convert.NumberToSql(rsuQuoteAssemblyCosts.Fields("uqcQuoteAssemblyCostID").value)
		
		rsuQuoteAssemblyCosts.Fields("uqcMaterialCost").value = cDbl(rsQuoteQuantities.Fields("qmqMaterialCost").Value)
		rsuQuoteAssemblyCosts.Fields("uqcSubcontractCost").value = cDbl(rsQuoteQuantities.Fields("qmqSubcontractCost").Value)
		
		TotalCost = 0
		
		TotalCost = TotalCost + App.Ax("QuoteFunctions").CalculateMarkup(rsQuoteQuantities.Fields("qmlQuoteMarkupType").Value, _
		                                                            rsQuoteQuantities.Fields("qmqMaterialCost").Value, _
		                                                            rsQuoteQuantities.Fields("qmqMaterialMarkupPercent").Value, _
		                                                            5)
		TotalCost = TotalCost + App.Ax("QuoteFunctions").CalculateMarkup(rsQuoteQuantities.Fields("qmlQuoteMarkupType").Value, _
		                                                            rsQuoteQuantities.Fields("qmqSubcontractCost").Value, _
		                                                            rsQuoteQuantities.Fields("qmqSubcontractMarkupPercent").Value, _
		                                                            5)
		If QuotingMethod = LABOR_OVERHEAD Then
			rsuQuoteAssemblyCosts.Fields("uqcLaborCost").value = cDbl(rsQuoteQuantities.Fields("qmqLaborCost").Value)
			rsuQuoteAssemblyCosts.Fields("uqcOverheadCost").value = cDbl(rsQuoteQuantities.Fields("qmqOverheadCost").Value)
			TotalCost = TotalCost + App.Ax("QuoteFunctions").CalculateMarkup(rsQuoteQuantities.Fields("qmlQuoteMarkupType").Value, _
			                                                            rsQuoteQuantities.Fields("qmqLaborCost").Value, _
			                                                            rsQuoteQuantities.Fields("qmqLaborMarkupPercent").Value, _
			                                                            5)
			TotalCost = TotalCost + App.Ax("QuoteFunctions").CalculateMarkup(rsQuoteQuantities.Fields("qmlQuoteMarkupType").Value, _
			                                                            rsQuoteQuantities.Fields("qmqOverheadCost").Value, _
			                                                            rsQuoteQuantities.Fields("qmqOverheadMarkupPercent").Value, _
			                                                            5)
		ElseIf QuotingMethod = QUOTING_RATE Then
			rsuQuoteAssemblyCosts.Fields("uqcQuotingCost").value = cDbl(rsQuoteQuantities.Fields("qmqQuotingCost").Value)
			TotalCost = TotalCost + App.Ax("QuoteFunctions").CalculateMarkup(rsQuoteQuantities.Fields("qmlQuoteMarkupType").Value, _
			                                                            rsQuoteQuantities.Fields("qmqQuotingCost").Value, _
			                                                            rsQuoteQuantities.Fields("qmqQuotingMarkupPercent").Value, _
			                                                            5)
		End If
		TotalCost = TotalCost - (TotalCost * (cDbl(rsQuoteQuantities.Fields("qmqCommissionPercent").Value) / 100)) / _
		                         ((cDbl(rsQuoteQuantities.Fields("qmqCommissionPercent").Value) / 100) - 1)
		
		rsuQuoteAssemblyCosts.Fields("uqcUnitPrice").value = cDbl(TotalCost)
		
		rsQuoteQuantities.MoveNext()
	loop
	
	rsuQuoteAssemblyCosts.UpdateBatch
End Sub
		
Private Function GetTemporaryQuoteQuantities(QuoteID)
	Set GetTemporaryQuoteQuantities = Connection.Execute( _
																	"	SELECT qmlPartID, qmlQuoteMarkupType, QuoteQuantities.* " & _
																	"	FROM   QuoteQuantities " & _
																	"	       INNER JOIN QuoteLines " & _
																	"	               ON qmqQuoteID = qmlQuoteID " & _
																	"	                  AND qmqQuoteLineID = qmlQuoteLineID " & _
																	"	WHERE  qmqQuoteID = " & App.Convert.StringToSql(QuoteID) & _
																	"	       AND qmqQuoteLineID < 0")
End Function
		
Private Function DeleteTemporaryQuoteLines(QuoteID)
	Connection.Execute _
		"	DELETE QuoteLines " & _
		"	WHERE  qmlQuoteID = " & App.Convert.StringToSql(QuoteID) & _
		"	       AND qmlQuoteLineID < 0"
	Connection.Execute _
		"	DELETE QuoteQuantities " & _
		"	WHERE  qmqQuoteID = " & App.Convert.StringToSql(QuoteID) & _
		"	       AND qmqQuoteLineID < 0"
	Connection.Execute _
		"	DELETE QuoteAssemblies " & _
		"	WHERE  qmaQuoteID = " & App.Convert.StringToSql(QuoteID) & _
		"	       AND qmaQuoteLineID < 0"
	Connection.Execute _
		"	DELETE QuoteOperations " & _
		"	WHERE  qmoQuoteID = " & App.Convert.StringToSql(QuoteID) & _
		"	       AND qmoQuoteLineID < 0"
	Connection.Execute _
		"	DELETE QuoteMaterials " & _
		"	WHERE  qmmQuoteID = " & App.Convert.StringToSql(QuoteID) & _
		"	       AND qmmQuoteLineID < 0"
	Connection.Execute _
		"	DELETE uQuoteAssemblyCosts " & _
		"	WHERE  uqcQuoteID = " & App.Convert.StringToSql(QuoteID) & _
		"	       AND uqcQuoteLineID < 0"
End Function
		
Private Function CreateQuoteLineItem(ByVal QuoteID, ByVal Quantities, ByVal ProjectID, _
		                                 ByVal ProjectAreaID, ByVal PartID, ByVal PartShortDescription)
	
'	QuoteLineID = App.GetNextIDForTable("QuoteLines", Array(QuoteID)) 'old v8 function
'	QuoteLineID = App.GenerateNextIDForTable("QuoteLines", Array(QuoteID)) 'call from v9 conversion
	QuoteLineID = App.Ax("LegacyFunctions").GetNextIDForTable("QuoteLines", Array(QuoteID))
	CreateQuoteLine QuoteID, QuoteLineID, ProjectID, _
	                ProjectAreaID, PartID, PartShortDescription
	CreateQuoteQuantities QuoteID, QuoteLineID, Quantities
	CreateQuoteLineItem = QuoteLineID
End Function
		
Private Function CreateTempQuoteLineItem(ByVal QuoteID, ByVal Quantities, ByVal PartID, _
	                                       ByVal PartShortDescription)
	QuoteLineID = cInt(Connection.Execute( _
																				"	SELECT IsNull(MIN(qmlQuoteLineID), 0) AS qmlQuoteLineID " & _
																				"	FROM   QuoteLines " & _
																				"	WHERE  qmlQuoteID = " & App.Convert.StringToSql(QuoteID)).Fields("qmlQuoteLineID").Value) - 1
	If IsNull(QuoteLineID) Then
		QuoteLineID = -1
	ElseIf cInt(QuoteLineID) >= 0 then
		QuoteLineID = -1
	End If
	
	CreateQuoteLine QuoteID, QuoteLineID, "", _
	                "", PartID, PartShortDescription
	CreateQuoteQuantities QuoteID, QuoteLineID, Quantities
	CreateTempQuoteLineItem = QuoteLineID
End Function
		
Private Function CreateQuoteLine(ByVal QuoteID, ByVal QuoteLineID, ByVal ProjectID, _
	                               ByVal ProjectAreaID, ByVal PartID, ByVal PartShortDescription)
	Set rsQuoteLines = CreateObject("ADODB.RecordSet")
	rsQuoteLines.Open _ 
		"	SELECT * " & _
		"	FROM   QuoteLines " & _ 
		"	WHERE  0 = 1", _ 
		Connection, adOpenStatic, adLockBatchOptimistic, adCmdText
	
	rsQuoteLines.AddNew
	rsQuoteLines.Fields("qmlQuoteID").value = LEFT(QuoteID, 10)
	rsQuoteLines.Fields("uqmlImported").Value = True
	Set rsQuotedCustomerOrganizations = CreateObject("ADODB.Recordset")
	rsQuotedCustomerOrganizations.Open _
		"	SELECT qmpProjectID, cmlCustomerTaxable, cmlCustomerTaxCodeID," & _
		"	       cmlCustomerSecondTaxCodeID, cmlNonTaxReasonID " & _
		"	FROM   Quotes " & _
		"	       INNER JOIN OrganizationLocations " & _
		"	               ON qmpShipOrganizationID = cmlOrganizationID " & _
		"	                     AND qmpShipLocationID = cmlLocationID" & _
		"	WHERE  qmpQuoteID = " & App.Convert.StringToSql(rsQuoteLines.Fields("qmlQuoteID").Value), _
		Connection, adOpenStatic, adLockReadOnly, adCmdText

	If rsQuotedCustomerOrganizations.EOF = False Then
		If CInt(rsQuotedCustomerOrganizations.Fields("cmlCustomerTaxable").Value) = True Then
			rsQuoteLines.Fields("qmlTaxCodeID").Value = rsQuotedCustomerOrganizations.Fields("cmlCustomerTaxCodeID").Value
			rsQuoteLines.Fields("qmlSecondTaxCodeID").Value = rsQuotedCustomerOrganizations.Fields("cmlCustomerSecondTaxCodeID").Value
		End If
		rsQuoteLines.Fields("qmlNonTaxReasonID").Value = rsQuotedCustomerOrganizations.Fields("cmlNonTaxReasonID").Value
		rsQuoteLines.Fields("qmlProjectID").Value = rsQuotedCustomerOrganizations.Fields("qmpProjectID").Value
	End If
	rsQuotedCustomerOrganizations.Close

	If App.Ax("Production").AvalaraActivated = True Then
		Connection.Execute _
			"	UPDATE Quotes " & _
			"	SET    qmpAvalaraTaxCalculated = 0 " & _
			"	WHERE  qmpAvalaraTaxCalculated <> 0 " & _
			"	       AND qmpQuoteID = " & App.Convert.StringToSql(rsQuoteLines.Fields("qmlQuoteID").Value)
	End If

	rsQuoteLines.Fields("qmlQuoteLineID").value = QuoteLineID
	rsQuoteLines.Fields("qmlPartID").value = LEFT(PartID, 30)
		
	If Trim(rsQuoteLines.Fields("qmlPartID").Value) <> "" Then
		Set rsParts = CreateObject("ADODB.Recordset")
		rsParts.Open _
			"	SELECT impPartGroupID, impTaxCodeID, impSecondTaxCodeID, " & _
			"	       impAlwaysNonTaxable, impNonTaxReasonID, impDeliveryType " & _
			"	FROM   Parts " & _
			"	WHERE  impPartID = " & App.Convert.StringToSql(rsQuoteLines.Fields("qmlPartID").Value),_
			Connection, adOpenStatic, adLockReadOnly, adCmdText
		If Not rsParts.EOF Then
			rsQuoteLines.Fields("qmlPartGroupID").Value = rsParts.Fields("impPartGroupID").Value
			
			If CInt(rsParts.Fields("impAlwaysNonTaxable").Value) = True Then
				rsQuoteLines.Fields("qmlTaxCodeID").Value = rsParts.Fields("impTaxCodeID").Value
				rsQuoteLines.Fields("qmlSecondTaxCodeID").Value = rsParts.Fields("impSecondTaxCodeID").Value
			Else
				If Trim(rsParts.Fields("impTaxCodeID").Value) <> "" Then
					rsQuoteLines.Fields("qmlTaxCodeID").Value = rsParts.Fields("impTaxCodeID").Value
				End If
					
				If Trim(rsParts.Fields("impSecondTaxCodeID").Value) <> "" Then
					rsQuoteLines.Fields("qmlSecondTaxCodeID").Value = rsParts.Fields("impSecondTaxCodeID").Value
				End If
			End If
					
			If Trim(rsParts.Fields("impNonTaxReasonID").Value) <> "" Then
				rsQuoteLines.Fields("qmlNonTaxReasonID").Value = rsParts.Fields("impNonTaxReasonID").Value
			End If
				
			If CInt(rsParts.fields("impDeliveryType").value) = 5 Then
				rsQuoteLines.Fields("qmlPurchaseToOrder").value = True
			Else
				rsQuoteLines.Fields("qmlPurchaseToOrder").value = 0
			End If
		End If
		rsParts.Close
	End If
				
	rsQuoteLines.Fields("qmlUnitOfMeasure").value = App.Props("OM").Fields("xapomunitofmeasure").Value
	If Trim(rsQuoteLines.Fields("qmlPartID").Value) <> "" Then
		Set rsPartRevisions = CreateObject("ADODB.Recordset")
		rsPartRevisions.Open _
			"	SELECT imrShortDescription, imrInventoryUnitOfMeasure, imrLongDescriptionRTF, " & _
			"	       imrLongDescriptionText, imrDocuments " & _
			"	FROM   PartRevisions " & _
			"	WHERE  imrPartID = " & App.Convert.StringToSql(rsQuoteLines.Fields("qmlPartID").Value) & _
			"	       And imrPartRevisionID = " & App.Convert.StringToSql(rsQuoteLines.Fields("qmlPartRevisionID").Value),_
			Connection,adOpenStatic,adLockReadOnly,adCmdText
		If rsPartRevisions.EOF = False Then
			rsQuoteLines.Fields("qmlUnitOfMeasure").Value = rsPartRevisions.Fields("imrInventoryUnitOfMeasure").Value
			rsQuoteLines.Fields("qmlPartShortDescription").Value = rsPartRevisions.Fields("imrShortDescription").Value
			rsQuoteLines.Fields("qmlPartLongDescriptionRTF").Value = rsPartRevisions.Fields("imrLongDescriptionRTF").Value
			rsQuoteLines.Fields("qmlPartLongDescriptionText").Value = rsPartRevisions.Fields("imrLongDescriptionText").Value
			rsQuoteLines.Fields("qmlDocuments").Value = rsPartRevisions.Fields("imrDocuments").Value
		End If
		rsPartRevisions.Close

		If CInt(rsQuoteLines.Fields("qmlPurchaseToOrder").Value) = -1 Then
			Set rsQuotes = CreateObject("ADODB.Recordset")
			rsQuotes.Open _
				"	SELECT qmpQuoteDate, qmpCurrencyRateID " & _
				"	FROM   Quotes " & _
				"	WHERE  qmpQuoteID = " & App.Convert.StringToSql(rsQuoteLines.Fields("qmlQuoteID").Value), _
				Connection, adOpenStatic, adLockReadOnly, adCmdText
			If rsQuotes.EOF = False Then
				dPriceDate = rsQuotes.Fields("qmpQuoteDate").Value
				cCurrencyID = rsQuotes.Fields("qmpCurrencyRateID").Value
			End If
			rsQuotes.Close
			
			bForeignAmount = False
			nValue = App.Ax("PartFunctions").GetPurchasePrice(rsQuoteLines.Fields("qmlPartID").Value, _
																									 rsQuoteLines.Fields("qmlPartRevisionID").Value, _
																									 rsQuoteLines.Fields("qmlSupplierOrganizationID").Value, _
																									 rsQuoteLines.Fields("qmlPurchaseLocationID").Value, _
																									 0, _
																									 "MATERIAL", _
																									 cCurrencyID, _
																									 bForeignAmount, _
																									 dPriceDate)

			If nValue >= 0 Then
				If bForeignAmount = True Then
					If CDbl(nValue) <> CDbl(rsQuoteLines.Fields("qmlPurchaseUnitCostForeign").Value) Then
						rsQuoteLines.Fields("qmlPurchaseUnitCostForeign").Value = nValue
					End If
				Else
					If CDbl(nValue) <> CDbl(rsQuoteLines.Fields("qmlPurchaseUnitCostBase").Value) Then
						rsQuoteLines.Fields("qmlPurchaseUnitCostBase").Value = nValue
					End If
				End If
			End If
		End If
	End If

' We don't deal with customer part number cross-references, so this is commented out for now.
' It should still be fixed.
'	Call App.Ax("PartFunctions").PartReferenceCheck(rsQuoteLines.fields, _
'																						 "qmlPartID", _
'																						 "qmlPartRevisionID", _
'																						 "qmlOrgPartID", _
'																						 "qmlPartShortDescription", _
'																						 "qmlOrgPartShortDescription", _
'																						 "	SELECT qmpCustomerOrganizationID " & _
'																						 "	FROM Quotes " & _
'																						 "	WHERE qmpQuoteID = " & App.Convert.StringToSql(rsQuoteLines.Fields("qmlQuoteID").Value), _
'																						 "	SELECT qmpQuoteLocationID " & _
'																						 "	FROM Quotes " & _
'																						 "	WHERE qmpQuoteID = " & App.Convert.StringToSql(rsQuoteLines.Fields("qmlQuoteID").Value), _

	If Trim(PartShortDescription) <> "" Then
		rsQuoteLines.Fields("qmlPartShortDescription").value = LEFT(PartShortDescription, 50)
	End If
	rsQuoteLines.Fields("qmlQuoteMarkupType").value = App.Props("PN").Fields("xapQMQuoteMarkupType").Value
	rsQuoteLines.Fields("qmlQuantityToTotal").value = 1
	rsQuoteLines.Fields("qmlMatrixCalculated").value = true
	'gone in v9
	'rsQuoteLines.Fields("qmlTaxesCalculated").value = True 
	If(CInt(rsQuoteLines.Fields("qmlPurchaseToOrder").Value)) = 0 Then
		rsQuoteLines.Fields("qmlSupplierOrganizationID").Value = ""
		rsQuoteLines.Fields("qmlPurchaseLocationID").Value = ""
		rsQuoteLines.Fields("qmlPurchaseUnitCostBase").Value = 0
	Else
		If Trim(rsQuoteLines.Fields("qmlPartID").Value) <> "" Then
			Set rsQuotes = CreateObject("ADODB.RecordSet")
			rsQuotes.Open _
				"	SELECT qmpQuoteDate, qmpCurrencyRateID " & _
				"	FROM   Quotes " & _
				"	WHERE  qmpQuoteID = " & App.Convert.StringToSql(rsQuoteLines.Fields("qmlQuoteID").Value), _
				Connection, adOpenStatic, adLockReadOnly, adCmdText
			If rsQuotes.EOF = False Then
				dPriceDate = rsQuotes.Fields("qmpQuoteDate").Value
				cCurrencyID = rsQuotes.Fields("qmpCurrencyRateID").Value
			End If
			rsQuotes.Close
			
			bForeignAmount = False
			nValue = App.Ax("PartFunctions").GetPurchasePrice(rsQuoteLines.Fields("qmlPartID").Value, _
																									 rsQuoteLines.Fields("qmlPartRevisionID").Value, _
																									 rsQuoteLines.Fields("qmlSupplierOrganizationID").Value, _
																									 rsQuoteLines.Fields("qmlPurchaseLocationID").Value, _
																									 0, _
																									 "MATERIAL", _
																									 cCurrencyID, _
																									 bForeignAmount, _
																									 dPriceDate)
			If nValue >= 0 Then
				If bForeignAmount = True Then
					If CDbl(nValue) <> CDbl(rsQuoteLines.Fields("qmlPurchaseUnitCostForeign").Value) Then
						rsQuoteLines.Fields("qmlPurchaseUnitCostForeign").Value = nValue
					End If
				Else
					If CDbl(nValue) <> CDbl(rsQuoteLines.Fields("qmlPurchaseUnitCostBase").Value) Then
						rsQuoteLines.Fields("qmlPurchaseUnitCostBase").Value = nValue
					End If
				End If
			End If
		End If
	End If

	rsQuoteLines.Fields("qmlProjectID").value = LEFT(ProjectID, 10)
	rsQuoteLines.Fields("qmlProjectAreaID").value = LEFT(ProjectAreaID, 15)
	rsQuoteLines.Fields("qmlFirm").value = True
	rsQuoteLines.Fields("qmlCreatedBy").value = App.UserID
	rsQuoteLines.Fields("qmlCreatedDate").value = Now()

	'Update Trigger
'Tax refresh is now handled by the "Update Revised Prices" customization
'	If CInt(rsQuoteLines.Fields("qmlTaxesCalculated").Value) = False Then
'	  Call App.Ax("QuoteFunctions").RefreshTaxes(rsQuoteLines.Fields)
'	End If

	rsQuoteLines.UpdateBatch
	
	'After Update Trigger
	Set rsQuoteAssemblies = CreateObject("ADODB.Recordset")
	rsQuoteAssemblies.Open _
		"	SELECT * " & _
		"	FROM   QuoteAssemblies " & _
		"	WHERE  qmaQuoteID = " & App.Convert.StringToSql(rsQuoteLines.Fields("qmlQuoteID").Value) & _
		"	       AND qmaQuoteLineID = " & App.Convert.NumberToSql(rsQuoteLines.Fields("qmlQuoteLineID").Value) & _
		"	       AND qmaQuoteAssemblyID = 0",_
		Connection, adOpenStatic, adLockBatchOptimistic, adCmdText
	If rsQuoteAssemblies.EOF Then
		rsQuoteAssemblies.AddNew
		App.BlankRecord rsQuoteAssemblies
	End If

	rsQuoteAssemblies.Fields("qmaClosed").Value = rsQuoteLines.Fields("qmlClosed").Value
	rsQuoteAssemblies.Fields("qmaQuoteID").Value = rsQuoteLines.Fields("qmlQuoteID").Value
	rsQuoteAssemblies.Fields("qmaQuoteLineID").Value = rsQuoteLines.Fields("qmlQuoteLineID").Value
	rsQuoteAssemblies.Fields("qmaQuoteAssemblyID").Value = 0
	rsQuoteAssemblies.Fields("qmaLevel").Value = 1
	rsQuoteAssemblies.Fields("qmaParentAssemblyID").Value = 0
	rsQuoteAssemblies.Fields("qmaPartID").Value = rsQuoteLines.Fields("qmlPartID").Value
	rsQuoteAssemblies.Fields("qmaPartRevisionID").Value = rsQuoteLines.Fields("qmlPartRevisionID").Value
	rsQuoteAssemblies.Fields("qmaUnitOfMeasure").Value = rsQuoteLines.Fields("qmlUnitOfMeasure").Value
	rsQuoteAssemblies.Fields("qmaPartShortDescription").Value = rsQuoteLines.Fields("qmlPartShortDescription").Value
	rsQuoteAssemblies.Fields("qmaPartLongDescriptionRTF").Value = rsQuoteLines.Fields("qmlPartLongDescriptionRTF").Value
	rsQuoteAssemblies.Fields("qmaPartLongDescriptionText").Value = rsQuoteLines.Fields("qmlPartLongDescriptionText").Value
	rsQuoteAssemblies.Fields("qmaSourceMethodID").Value = rsQuoteLines.Fields("qmlSourceMethodID").Value
	rsQuoteAssemblies.Fields("qmaProductionNotesRTF").Value = rsQuoteLines.Fields("qmlProductionNotesRTF").Value
	rsQuoteAssemblies.Fields("qmaProductionNotesText").Value = rsQuoteLines.Fields("qmlProductionNotesText").Value
	rsQuoteAssemblies.Fields("qmaDocuments").Value = rsQuoteLines.Fields("qmlDocuments").Value
	rsQuoteAssemblies.Fields("qmaQuantityPerParent").Value = 1

	rsQuoteAssemblies.UpdateBatch
	rsQuoteAssemblies.Close
		
	CreateQuoteLine = rsQuoteLines.Fields("qmlQuoteLineID").value
End Function
		
Private Function CreateQuoteQuantities(ByVal QuoteID, ByVal QuoteLineID, ByVal Quantities)
	Set rsQuoteQuantities = CreateObject("ADODB.RecordSet")
	rsQuoteQuantities.Open _ 
		"	SELECT * " & _
		"	FROM   QuoteQuantities " & _ 
		"	WHERE  0 = 1", _ 
		Connection, adOpenStatic, adLockBatchOptimistic, adCmdText
	
	CommissionPercent = cDbl(GetCommissions(QuoteID, _
							             GetQuoteLinePartGroup(QuoteID, _
							                                   QuoteLineID)))
	
	QuoteQuantityID = 1
	
	For Each ItemQuantity in Quantities
		If QuoteQuantityID > 9 then 
			Exit For
		End If
		rsQuoteQuantities.AddNew
		rsQuoteQuantities.Fields("qmqQuoteID").value = LEFT(QuoteID, 10)
		rsQuoteQuantities.Fields("qmqQuoteLineID").value = cDbl(QuoteLineID)
		rsQuoteQuantities.Fields("qmqQuoteQuantityID").value = cDbl(QuoteQuantityID)
		rsQuoteQuantities.Fields("qmqQuoteQuantity").value = cDbl(ItemQuantity)
		rsQuoteQuantities.Fields("qmqTotalRunQuantity").value = cDbl(ItemQuantity)
		rsQuoteQuantities.Fields("qmqQuoteMarkupType").value = GetMarkupTypeFromQuoteLine (QuoteID, QuoteLineID)
				
		rsQuoteQuantities.Fields("qmqMaterialMarkupPercent").value = cDbl(App.Props("QM").Fields("xapQMMaterialMarkup").Value)
		rsQuoteQuantities.Fields("qmqSubcontractMarkupPercent").value = cDbl(App.Props("QM").Fields("xapQMSubcontractMarkup").Value)
		rsQuoteQuantities.Fields("qmqLaborMarkupPercent").value = cDbl(App.Props("QM").Fields("xapQMLaborMarkup").Value)
		rsQuoteQuantities.Fields("qmqOverheadMarkupPercent").value = cDbl(App.Props("QM").Fields("xapQMOverheadMarkup").Value)
		rsQuoteQuantities.Fields("qmqQuotingMarkupPercent").value = cDbl(App.Props("QM").Fields("xapQMQuotingMarkup").Value)
		rsQuoteQuantities.Fields("qmqPurToOrderMarkupPercent").value = cDbl(App.Props("QM").Fields("xapQMPurchaseToOrderMarkup").Value)
		
		rsQuoteQuantities.Fields("qmqCommissionPercent").value = CommissionPercent				
		
		If CInt(App.InUserChangeEvent) = True Then
			nPrice = App.Round((CDbl(rsQuoteQuantities.Fields("qmqFullRevisedUnitPriceBase").Value) * _
												 (CDbl(rsQuoteQuantities.Fields("qmqDiscountPercent").Value) / 100)),5)
			If CDbl(rsQuoteQuantities.Fields("qmqUnitDiscountBase").Value) <> nPrice Then
				rsQuoteQuantities.Fields("qmqUnitDiscountBase").Value = nPrice
			End If
		End If

		nPrice = App.Ax("LegacyFunctions").ExchangeCurrency(CDbl(rsQuoteQuantities.Fields("qmqUnitDiscountBase").Value), _
				                          "QuoteQuantities", _
				                          rsQuoteQuantities.Fields("qmqQuoteID").Value, _
				                          "BASE", _
				                          5)
				
		If CDbl(nPrice) <> CDbl(rsQuoteQuantities.Fields("qmqUnitDiscountForeign").Value) And App.UpdatingCost = False Then
			App.UpdatingCost = True
			rsQuoteQuantities.Fields("qmqUnitDiscountForeign").Value = nPrice
			App.UpdatingCost = False
		End If
		
		nPrice = App.Round(CDbl(rsQuoteQuantities.Fields("qmqFullRevisedUnitPriceBase").Value) - _
				               CDbl(rsQuoteQuantities.Fields("qmqUnitDiscountBase").Value), _
				               5)
		
		If CDbl(rsQuoteQuantities.Fields("qmqRevisedUnitPriceBase").Value) <> nPrice Then
			rsQuoteQuantities.Fields("qmqRevisedUnitPriceBase").Value = nPrice
		End If
		
		If CDbl(rsQuoteQuantities.Fields("qmqFullRevisedUnitPriceBase").Value) <> 0 Then
			nPrice = CDbl(rsQuoteQuantities.Fields("qmqUnitDiscountBase").Value) / _
			         CDbl(rsQuoteQuantities.Fields("qmqFullRevisedUnitPriceBase").Value)
			nPrice = nPrice * 100
			nPrice = App.Round(nPrice,2)
			If nPrice > 999.99 Then
				nPrice = 999.99
			ElseIf nPrice < -999.99 Then
				nPrice = -999.99
			End If
			If CDbl(rsQuoteQuantities.Fields("qmqDiscountPercent").Value) <> nPrice Then
				bPrev = App.InUserChangeEvent
				App.InUserChangeEvent = False
				rsQuoteQuantities.Fields("qmqDiscountPercent").Value = nPrice
				App.InUserChangeEvent = bPrev
			End If
		End If

		nPrice = App.Ax("LegacyFunctions").ExchangeCurrency(CDbl(rsQuoteQuantities.Fields("qmqFullRevisedUnitPriceBase").Value), _
																	"QuoteQuantities", _
																	rsQuoteQuantities.Fields("qmqQuoteID").Value, _
																	"BASE", _
																	5)
		If CDbl(nPrice) <> CDbl(rsQuoteQuantities.Fields("qmqFullRevisedUnitPriceForeign").Value) And App.UpdatingCost = False Then
			App.UpdatingCost = True
			rsQuoteQuantities.Fields("qmqFullRevisedUnitPriceForeign").Value = nPrice
			App.UpdatingCost = False
		End If
		
		
		nPrice = App.Round(CDbl(rsQuoteQuantities.Fields("qmqFullRevisedUnitPriceBase").Value) - _
											 CDbl(rsQuoteQuantities.Fields("qmqUnitDiscountBase").Value),5)
		If CDbl(rsQuoteQuantities.Fields("qmqRevisedUnitPriceBase").Value) <> nPrice Then
			rsQuoteQuantities.Fields("qmqRevisedUnitPriceBase").Value = nPrice
		End If
		
		If CDbl(rsQuoteQuantities.Fields("qmqFullRevisedUnitPriceBase").Value) <> 0 Then
			nPrice = CDbl(rsQuoteQuantities.Fields("qmqUnitDiscountBase").Value) / _
										CDbl(rsQuoteQuantities.Fields("qmqFullRevisedUnitPriceBase").Value)
			nPrice = nPrice * 100
			nPrice = App.Round(nPrice,2)
			If nPrice > 999.99 Then
				nPrice = 999.99
			ElseIf nPrice < -999.99 Then
				nPrice = -999.99
			End If
			If CDbl(rsQuoteQuantities.Fields("qmqDiscountPercent").Value) <> nPrice Then
				rsQuoteQuantities.Fields("qmqDiscountPercent").Value = nPrice
			End If
		End If
		rsQuoteQuantities.Fields("qmqCreatedBy").value = App.UserID
		rsQuoteQuantities.Fields("qmqCreatedDate").value = Now()
	next
	rsQuoteQuantities.UpdateBatch
End Function
				
Private Function GetMarkupTypeFromQuoteLine (QuoteID, QuoteLineID)
	GetMarkupTypeFromQuoteLine = Connection.Execute( _	
																"	SELECT qmlQuoteMarkupType " & _
																"	FROM 	QuoteLines " & _
																"	WHERE qmlQuoteID = " & App.Convert.StringToSql(QuoteID) & _
																"		and qmlQuoteLineID =" & App.Convert.StringToSql(QuoteLineID)).Fields(0).Value
End Function
				
Private Function GetCommissions(QuoteID, PartGroupID)
	Select Case cInt(GetCommissionType(PartGroupID))
		Case 1
			TotalCommission = Connection.Execute( _	
													"	SELECT SUM((qmjPercent / 100) * lmeCommissionRate) As Total " & _
													"	FROM   QuoteSalesPeople " & _
													"	       INNER JOIN Employees " & _
													"	               ON qmjSalesEmployeeID = lmeEmployeeID " & _
													"	WHERE  qmjQuoteID = " & App.Convert.StringToSql(QuoteID)).Fields(0).Value
		Case 2
			TotalCommission = Connection.Execute( _	
													"	SELECT SUM((qmjPercent / 100) * imuCommissionRate) As Total " & _
													"	FROM   QuoteSalesPeople " & _
													"	       INNER JOIN PartGroups " & _
													"	               ON imuPartGroupID = " & App.Convert.StringToSql(PartGroupID) & _
													"	WHERE  qmjQuoteID = " & App.Convert.StringToSql(QuoteID)).Fields(0).Value
		Case Else
			TotalCommission = 0
	End Select
	If IsNull(TotalCommission) Then
		GetCommissions = 0
	Else
		GetCommissions = TotalCommission
	End If
End Function
				
Private Function GetCommissionType(PartGroupID)
	Set rsCommissionType = Connection.Execute( _
													"	SELECT IsNull(imuCommissionType, 1) AS imuCommissionType " & _
													"	FROM   PartGroups " & _
													"	WHERE  imuPartGroupID = " & App.Convert.StringToSql(PartGroupID))
	If rsCommissionType.EOF then 
		GetCommissionType = 1
	Else
		GetCommissionType = rsCommissionType.Fields("imuCommissionType").Value
	end if
End Function
				
Private Function GetQuoteLinePartGroup(QuoteID, QuoteLineID)
	GetQuoteLinePartGroup = Connection.Execute( _
												"	SELECT IsNull(qmlPartGroupID, '') AS qmlPartGroupID " & _
												"	FROM   QuoteLines " & _
												"	WHERE  qmlQuoteID = " & App.Convert.StringToSql(QuoteID) & _
												"	       AND qmlQuoteLineID = " & App.Convert.NumberToSql(QuoteLineID)).Fields("qmlPartGroupID").Value
End Function
				
Private Function GetQuoteAssemblies()
  Set rsQuoteAssemblies = CreateObject("ADODB.RecordSet")
  rsQuoteAssemblies.Open _ 
    "  SELECT * " & _
    "  FROM   QuoteAssemblies " & _ 
    "  WHERE  0 = 1", _ 
    Connection, adOpenStatic, adLockBatchOptimistic, adCmdText
	
	Set GetQuoteAssemblies = rsQuoteAssemblies
End Function
				
Private Function CreateQuoteAssemblies(ByRef rsQuoteAssemblies, ByVal QuoteID, ByVal QuoteLineID, _
	                                     ByVal QuoteAssemblyID, ByVal PartID, ByVal PartRevisionID, _
	                                     ByVal ShortDescription, ByVal LongDescription, ByVal QuantityPerAssembly, _
	                                     ByVal RoomNumber, ByVal RoomName)
  rsQuoteAssemblies.AddNew
	App.BlankRecord rsQuoteAssemblies
  rsQuoteAssemblies.Fields("qmaQuoteID").value = LEFT(QuoteID, 10)
  rsQuoteAssemblies.Fields("qmaQuoteLineID").value = cDbl(QuoteLineID)
  rsQuoteAssemblies.Fields("qmaQuoteAssemblyID").value = QuoteAssemblyID
  rsQuoteAssemblies.Fields("qmaParentAssemblyID").value = 0
  rsQuoteAssemblies.Fields("uqmaRoomNumber").value = Left(RoomNumber, 10)
  rsQuoteAssemblies.Fields("uqmaRoomName").value = Left(RoomName, 50)
	rsQuoteAssemblies.Fields("uqmaImported").Value = True
  rsQuoteAssemblies.Fields("qmaLevel").value = 2
  rsQuoteAssemblies.Fields("qmaPartID").value = LEFT(PartID, 30)
  rsQuoteAssemblies.Fields("qmaPartRevisionID").value = LEFT(PartRevisionID, 15)
  If Trim(rsQuoteAssemblies.Fields("qmaPartID").Value) <> "" Then
    Set rsPartRevisions = CreateObject("ADODB.Recordset")
    rsPartRevisions.Open _
      "  SELECT imrInventoryUnitOfMeasure, imrDocuments, imrShortDescription, " & _
			"	       imrLongDescriptionRTF, imrLongDescriptionText " & _
      "  FROM   PartRevisions " & _
      "  WHERE  imrPartID = " & App.Convert.StringToSql(rsQuoteAssemblies.Fields("qmaPartID").Value) & _
      "         AND imrPartRevisionID = " & App.Convert.StringToSql(rsQuoteAssemblies.Fields("qmaPartRevisionID").Value), _
      Connection, adOpenStatic, adLockReadOnly, adCmdText
    
    If Not rsPartRevisions.EOF Then
      rsQuoteAssemblies.Fields("qmaUnitOfMeasure").Value = rsPartRevisions.Fields("imrInventoryUnitOfMeasure").Value
      rsQuoteAssemblies.Fields("qmaDocuments").Value = rsPartRevisions.Fields("imrDocuments").Value
	  	rsQuoteAssemblies.Fields("qmaPartShortDescription").value = rsPartRevisions.Fields("imrShortDescription").Value
			rsQuoteAssemblies.Fields("qmaPartLongDescriptionRTF").value = rsPartRevisions.Fields("imrLongDescriptionRTF").Value
		  rsQuoteAssemblies.Fields("qmaPartLongDescriptionText").value = rsPartRevisions.Fields("imrLongDescriptionText").Value
    End If
    
    rsPartRevisions.Close
  End If
	
	If ShortDescription <> "" Then
  	rsQuoteAssemblies.Fields("qmaPartShortDescription").value = LEFT(ShortDescription, 50)
	End If
	
	If LongDescription <> "" then
		rsQuoteAssemblies.Fields("qmaPartLongDescriptionRTF").value = LongDescription
	  rsQuoteAssemblies.Fields("qmaPartLongDescriptionText").value = LongDescription
	End If
	
  rsQuoteAssemblies.Fields("qmaQuantityPerParent").value = QuantityPerAssembly
  rsQuoteAssemblies.Fields("qmaCreatedBy").value = App.UserID
  rsQuoteAssemblies.Fields("qmaCreatedDate").value = Now()
End Function
		
Private Function GetQuoteOperations()
	Set rsQuoteOperations = CreateObject("ADODB.RecordSet")
	rsQuoteOperations.Open _ 
		"	SELECT * " & _
		"	FROM   QuoteOperations " & _ 
		"	WHERE  0 = 1", _ 
		Connection, adOpenStatic, adLockBatchOptimistic, adCmdText
	Set GetQuoteOperations = rsQuoteOperations
End Function
		
Private Function CreateQuoteOperation(ByRef rsQuoteOperations, ByVal QuoteID, ByVal QuoteLineID, _
	                                    ByVal QuoteAssemblyID, ByVal QuoteOperationID, ByVal WorkcenterID, _
	                                    ByVal ProductionStandard)
	rsQuoteOperations.AddNew
	App.BlankRecord rsQuoteOperations
	'setup
	rsQuoteOperations.Fields("qmoQuoteID").value = LEFT(QuoteID, 10)
	rsQuoteOperations.Fields("qmoQuoteLineID").value = cDbl(QuoteLineID)
	rsQuoteOperations.Fields("qmoQuoteAssemblyID").value = QuoteAssemblyID
	rsQuoteOperations.Fields("qmoQuoteOperationID").value = QuoteOperationID
	rsQuoteOperations.Fields("uqmoImported").Value = True
	rsQuoteOperations.Fields("qmoOperationType").value = 1
	rsQuoteOperations.Fields("qmoWorkCenterID").value = LEFT(WorkcenterID, 5)
	
	'get info from workcenter identified by WorkCenterID
	Set rsWorkCenters = CreateObject("ADODB.Recordset")
	rsWorkCenters.Open _
		"	SELECT xawWorkCenterID, xawProcessID, xawOverheadRate, " & _
		"	       xawQuotingRate, xawSetupHours, xawStandardFactor, " & _
		"	       xawProductionStandard " & _
		"	FROM   WorkCenters " & _
		"	WHERE  xawWorkCenterID = " & App.Convert.StringToSql(rsQuoteOperations.Fields("qmoWorkCenterID").Value), _
		Connection,adOpenStatic,adLockReadOnly,adCmdText
	'store workcenter info
	If rsWorkCenters.EOF = False Then
		If CDbl(rsWorkCenters.Fields("xawSetupHours").Value) <> 0 Then
			rsQuoteOperations.Fields("qmoSetupHours").Value = rsWorkCenters.Fields("xawSetupHours").Value
		End If
		If Trim(rsWorkCenters.Fields("xawStandardFactor").Value) <> "" Then
			rsQuoteOperations.Fields("qmoStandardFactor").Value = rsWorkCenters.Fields("xawStandardFactor").Value
		End If
		If CDbl(rsWorkCenters.Fields("xawProductionStandard").Value) <> 0 Then
			rsQuoteOperations.Fields("qmoProductionStandard").Value = rsWorkCenters.Fields("xawProductionStandard").Value
		End If
	
		If Trim(rsWorkCenters.Fields("xawProcessID").Value) <> "" Then
			rsQuoteOperations.Fields("qmoProcessID").Value = rsWorkCenters.Fields("xawProcessID").Value
		End If
		rsQuoteOperations.Fields("qmoQuotingRate").Value = rsWorkCenters.Fields("xawQuotingRate").Value
		rsQuoteOperations.Fields("qmoOverheadRate").Value = rsWorkCenters.Fields("xawOverheadRate").Value
	
		'get costing info for default process for the work center
		If Trim(rsQuoteOperations.Fields("qmoProcessID").Value) <> "" Then
			Set rsProcesses = CreateObject("ADODB.Recordset")
			rsProcesses.Open _
				"	SELECT xacProjectedSetupRate, xacProjectedProductionRate " & _
				"	FROM   Processes " & _
				"	WHERE  xacProcessID = " & App.Convert.StringToSql(rsQuoteOperations.Fields("qmoProcessID").Value), _
				Connection,adOpenStatic,adLockReadOnly,adCmdText
			If rsProcesses.EOF = False Then
				rsQuoteOperations.Fields("qmoSetupRate").Value = rsProcesses.Fields("xacProjectedSetupRate").Value
				rsQuoteOperations.Fields("qmoProductionRate").Value = rsProcesses.Fields("xacProjectedProductionRate").Value
			End If
			rsProcesses.Close
		End If
	End If
	rsWorkCenters.Close
	
	'get more info for process
	Set rsProcesses = CreateObject("ADODB.Recordset")
	rsProcesses.Open _
		"	SELECT xacProcessID, xacShortDescription, xacLongDescriptionRTF, " & _
		"	       xacLongDescriptionText, xacProjectedSetupRate, xacProjectedProductionRate, " & _
		"	       xacSetupHours, xacStandardFactor, xacProductionStandard " & _
		"	FROM   Processes " & _
		"	WHERE  xacProcessID = " & App.Convert.StringToSql(rsQuoteOperations.Fields("qmoProcessID").Value), _
		Connection,adOpenStatic,adLockReadOnly,adCmdText
			'store it
	If rsProcesses.EOF = False Then
		cPrev = rsQuoteOperations.Fields("qmoProcessID").OriginalValue
		rsQuoteOperations.Fields("qmoProcessShortDescription").Value = rsProcesses.Fields("xacShortDescription").Value
		bCopyDesc = False
		'get long description from process
		Set rsTemp = CreateObject("ADODB.Recordset")
		rsTemp.Open _
			"	SELECT xacLongDescriptionRTF " & _
			"	FROM   Processes " & _
			"	WHERE  xacProcessID = " & App.Convert.StringToSql(cPrev), _
			Connection,adOpenStatic,adLockReadOnly,adCmdText
		If rsTemp.EOF = False Then
			If Trim(rsQuoteOperations.Fields("qmoProcessLongDescriptionRTF").Value) = _
				Trim(rsTemp.Fields("xacLongDescriptionRTF").Value) Then
				bCopyDesc = True
			Else
				If Trim(rsQuoteOperations.Fields("qmoProcessLongDescriptionText").Value) = "" Then
					bCopyDesc = True
				Else
					bCopyDesc = False
				End If
			End If
		Else
			If Trim(rsQuoteOperations.Fields("qmoProcessLongDescriptionText").Value) = "" Then
				bCopyDesc = True
			Else
				bCopyDesc = False
			End If
		End If
		rsTemp.Close
		If bCopyDesc = True Then
			rsQuoteOperations.Fields("qmoProcessLongDescriptionRTF").Value = rsProcesses.Fields("xacLongDescriptionRTF").Value
			rsQuoteOperations.Fields("qmoProcessLongDescriptionText").Value = rsProcesses.Fields("xacLongDescriptionText").Value
		End If
		rsQuoteOperations.Fields("qmoSetupRate").Value = rsProcesses.Fields("xacProjectedSetupRate").Value
		rsQuoteOperations.Fields("qmoProductionRate").Value = rsProcesses.Fields("xacProjectedProductionRate").Value
	
		If CDbl(rsProcesses.Fields("xacSetupHours").Value) <> 0 Then
			rsQuoteOperations.Fields("qmoSetupHours").Value = rsProcesses.Fields("xacSetupHours").Value
		End If
		If Trim(rsProcesses.Fields("xacStandardFactor").Value) <> "" Then
			rsQuoteOperations.Fields("qmoStandardFactor").Value = rsProcesses.Fields("xacStandardFactor").Value
		End If
		If CDbl(rsProcesses.Fields("xacProductionStandard").Value) <> 0 Then
			rsQuoteOperations.Fields("qmoProductionStandard").Value = rsProcesses.Fields("xacProductionStandard").Value
		End If
	End If
	rsProcesses.Close
	rsQuoteOperations.Fields("qmoQuantityPerAssembly").value = 1
	rsQuoteOperations.Fields("qmoProductionStandard").value = ProductionStandard
	rsQuoteOperations.Fields("qmoStandardFactor").value = "MP" 'App.Props("JM").Fields("xapjmstandardfactor").Value
	rsQuoteOperations.Fields("qmoMachinesToSchedule").value = 1
	rsQuoteOperations.Fields("qmoMachineType").value = 1
	rsQuoteOperations.Fields("qmoCreatedBy").value = App.UserID
	rsQuoteOperations.Fields("qmoCreatedDate").value = Now()
End Function
			
Private Function GetQuoteMaterials()
  Set rsQuoteMaterials = CreateObject("ADODB.RecordSet")
  rsQuoteMaterials.Open _ 
    "  SELECT * " & _
    "  FROM   QuoteMaterials " & _ 
    "  WHERE  0 = 1", _ 
    Connection, adOpenStatic, adLockBatchOptimistic, adCmdText
	
	Set GetQuoteMaterials = rsQuoteMaterials
End Function
			
Private Function CalculateQuantityPerAssembly(ByRef rsMaterialTable, ByRef rsSheetSize, ByRef rsPartTable, _
	                                            ByVal VBScriptFormula)

	For Each Item in GenerateArrayForCalculateQuantity(rsMaterialTable, rsSheetSize, rsPartTable)
		Execute Item(0) & " = " & cDbl(Item(1))
	Next
	
	Execute VBScriptFormula
	
	If Not IsNumeric(Formula) Then
		Formula = 0
	End If
	
	CalculateQuantityPerAssembly = formula
End Function
			
Private Function GenerateArrayForCalculateQuantity(ByRef rsMaterialTable, ByRef rsSheetSize, ByRef rsPartTable)
	Variables = Array()
	
	Redim Preserve Variables(uBound(Variables) + 2)
	
	If Not rsMaterialTable.EOF Then
		Variables(uBound(Variables) - 1) = Array("MaterialWaste", rsMaterialTable.Fields("Waste").Value)
		Variables(uBound(Variables)) = Array("MaterialRoughThickness", rsMaterialTable.Fields("RoughThickness").Value)
	Else
		Variables(uBound(Variables) - 1) = Array("MaterialWaste", 0)
		Variables(uBound(Variables)) = Array("MaterialRoughThickness", 0)
	End If
	
	If Not rsSheetSize.EOF Then
		Redim Preserve Variables(uBound(Variables) + 2)
		Variables(uBound(Variables) - 1) = Array("SheetWidth", rsSheetSize.Fields("Width").Value)
		Variables(uBound(Variables)) = Array("SheetLength", rsSheetSize.Fields("Length").Value)
	Else
		Variables(uBound(Variables) - 1) = Array("SheetWidth", 0)
		Variables(uBound(Variables)) = Array("SheetLength", 0)
	End If
	
	If Not rsPartTable.EOF Then
		Redim Preserve Variables(uBound(Variables) + 3)
		Variables(uBound(Variables) - 2) = Array("PartsLength", 0)
		Variables(uBound(Variables) - 1) = Array("PartsWidth", 0)
		Variables(uBound(Variables)) = Array("PartsArea", 0)
		For Count = 0 to rsPartTable.Fields.Count - 1
			Select Case rsPartTable.Fields(Count).Name
				Case "Area"
					Variables(uBound(Variables)) = Array("PartsArea", rsPartTable.Fields("Area").Value)
				Case "Length"
					Variables(uBound(Variables) - 2) = Array("PartsLength", rsPartTable.Fields("Length").Value)
				Case "Width"
					Variables(uBound(Variables) - 1) = Array("PartsWidth", rsPartTable.Fields("Width").Value)
				Case "Square Total"
					Variables(uBound(Variables)) = Array("PartsArea", rsPartTable.Fields("Square Total").Value)
			End Select
		Next
	Else
		Variables(uBound(Variables) - 2) = Array("PartsLength", 0)
		Variables(uBound(Variables) - 1) = Array("PartsWidth", 0)
		Variables(uBound(Variables)) = Array("PartsArea", 0)
	End If
	
	GenerateArrayForCalculateQuantity = Variables
End Function
				
Private Function GenerateQuoteMaterials(ByRef rsQuoteMaterials, ByVal ID, ByVal MaterialType, _
	                                      ByVal MaterialDescription, ByVal Cost, ByVal rsData, _
	                                      ByVal DescriptionJoinMap, ByVal QuoteID, ByVal QuoteLineID, _
																				ByVal QuoteAssemblyID, ByRef QuoteMaterialID, _
																				ByVal QuantityPerAssembly, ByVal UseDefaultValue)
	
		PartKeys = CabinetBuilderPartIDTranslation(ID, MaterialType)
	
'		App.DebugLog Join(Array("Generate Quote Materials", ID, MaterialType, _
'	                          MaterialDescription, Cost, QuoteMaterialID), "|"), DEBUG_MODE
	
		If Trim(PartKeys(0)) <> "" then
			'QuantityPerAssembly = 1

			Consolidated = False
			DefaultCost = cDbl(Cost)		
			LongDescription = JoinMap(rsData, DescriptionJoinMap)
			
			If CreateQuoteMaterialsWithQuantityFormula(rsQuoteMaterials, QuoteID, QuoteLineID, _
				                                         QuoteAssemblyID, QuoteMaterialID, PartKeys(0), _
				                                         PartKeys(1), QuantityPerAssembly, "", _
				                                         LongDescription, Consolidated, DefaultCost, UseDefaultValue, False) Then
				
				QuoteMaterialID = QuoteMaterialID + 1
			End If
		Else
			AddErrorMessage MaterialDescription & " " & Trim(ID) & " not found."		
		End If
End Function
				
Private Function CreateQuoteMaterialsWithQuantityFormula(ByRef rsQuoteMaterials, ByVal QuoteID, ByVal QuoteLineID, _
	                                                       ByVal QuoteAssemblyID, ByVAL QuoteMaterialID, ByVal PartID, _
	                                                       ByVal PartRevisionID, ByVal QuantityPerAssembly, ByVal ShortDescription, _
	                                                       ByVal LongDescription, ByVal Consolidated, ByVal DefaultPrice, _
	                                                       ByVal UseDefaultValue, ByVal FilterByName)
	
	if VERBOSE then
		msgbox "CreateQuoteMaterialsWithQuantityFormula" & vbnewline & _
					 "QuoteID: " & QuoteID & vbnewline & _
					 "QuoteLineID: " & QuoteLineID & vbnewline & _
					 "QuoteAssemblyID: " & QuoteAssemblyID & vbnewline & _
					 "QuoteMaterialID: " & QuoteMaterialID & vbnewline & _
			 		"PartID: " & PartID & vbnewline & _
					 "PartRevisionID: " & PartRevisionID & vbnewline & _
					 "QuantityPerAssembly: " & QuantityPerAssembly & vbnewline & _
					 "ShortDescription: " & ShortDescription & vbnewline & _
					 "LongDescription: " & LongDescription & vbnewline & _
					 "Consolidated: " & Consolidated & vbnewline & _
					 "DefaultPrice: " & DefaultPrice & vbnewline & _
					 "UseDefaultValue: " & UseDefaultValue & vbnewline & _
					 "FilterByName: " & FilterByName
	end if
	
	NewQuoteMaterialIDNeeded = False
	FoundPart = False
	QuoteMaterialWhereClause = ""
	If Consolidated Then
'		if FilterByName then
'			rsQuoteMaterials.Filter = "qmmPartID = " & App.Convert.StringToSql(PartID) & _
'			                          " AND qmmPartRevisionID = " & App.Convert.StringToSql(PartRevisionID) & _
'																" AND qmmPartShortDescription = " & App.Convert.StringToSql(ShortDescription)
'		else
'				rsQuoteMaterials.Filter = "qmmPartID = " & App.Convert.StringToSql(PartID) & _
'																	" AND qmmPartRevisionID = " & App.Convert.StringToSql(PartRevisionID)

'		end if
		' Begin hack to replace rs.filters above
		foundQuoteMaterial = FALSE
		rsQuoteMaterials.MoveFirst
		do while not found and not rsQuoteMaterials.EOF  
			if FilterByName then
				if rsQuoteMaterials.fields("qmmPartID").value = PartID _
					 	AND rsQuoteMaterials.fields("qmmPartRevisionID").value = PartRevisionID _
					 	AND rsQuoteMaterials.fields("qmmPartShortDescription").value = ShortDescription then
					foundQuoteMaterial = true
					exit do
				end if
			else
				if rsQuoteMaterials.fields("qmmPartID").value = PartID _
					 	AND rsQuoteMaterials.fields("qmmPartRevisionID").value = PartRevisionID then
					foundQuoteMaterial = true
					exit do
				end if
			end if
			rsQuoteMaterials.MoveNext	
		loop
		' end hack
		
		'asdf
		Do While Not rsQuoteMaterials.EOF 
			If cLng(rsQuoteMaterials.Fields("qmmQuoteAssemblyID").Value) = cLng(QuoteAssemblyID) Then
				rsQuoteMaterials.Fields("qmmQuantityPerAssembly").Value = cDbl(rsQuoteMaterials.Fields("qmmQuantityPerAssembly").Value) + _
				                                                          cDbl(QuantityPerAssembly)
				FoundPart = True
				Exit Do
			End IF
			rsQuoteMaterials.MoveNext
		Loop
		'rsQuoteMaterials.Filter = ""
		rsQuoteMaterials.MoveFirst						
	End If

	If (Not FoundPart) Or (Not Consolidated) Then

		CreateQuoteMaterials rsQuoteMaterials, QuoteID, QuoteLineID, _
		                  QuoteAssemblyID, _
	                    QuoteMaterialID, PartID, PartRevisionID, _
	                    QuantityPerAssembly, ShortDescription, LongDescription, DefaultPrice, UseDefaultValue
		NewQuoteMaterialIDNeeded = True
	End If
	
	CreateQuoteMaterialsWithQuantityFormula = NewQuoteMaterialIDNeeded
End Function
					
Private Function CreateQuoteMaterials(ByRef rsQuoteMaterials, ByVal QuoteID, ByVal QuoteLineID, _
																			ByVal QuoteAssemblyID, ByRef QuoteMaterialID, ByVal PartID, _
																			ByVal PartRevisionID, ByVal QuantityPerAssembly, ByVal ShortDescription, _
																			ByVal LongDescription, ByVal DefaultPrice, ByVal UseDefaultValue)
	
	if VERBOSE then
		msgbox "CreateQuoteMaterials" & vbnewline & _
					 "QuoteID: " & QuoteID & vbnewline & _
					 "QuoteLineID: " & QuoteLineID & vbnewline & _
					 "QuoteAssemblyID: " & QuoteAssemblyID & vbnewline & _
					 "QuoteMaterialID: " & QuoteMaterialID & vbnewline & _
					 "PartID: " & PartID & vbnewline & _
					 "PartRevisionID: " & PartRevisionID & vbnewline & _
					 "QuantityPerAssembly: " & QuantityPerAssembly & vbnewline & _
					 "ShortDescription: " & ShortDescription & vbnewline & _
					 "LongDescription: " & LongDescription & vbnewline & _
					 "DefaultPrice: " & DefaultPrice & vbnewline & _
					 "UseDefaultValue: " & UseDefaultValue
	end if
	
  rsQuoteMaterials.AddNew
	App.BlankRecord rsQuoteMaterials
  rsQuoteMaterials.Fields("qmmQuoteID").value = QuoteID
  rsQuoteMaterials.Fields("qmmQuoteLineID").value = QuoteLineID
  rsQuoteMaterials.Fields("qmmQuoteAssemblyID").value = QuoteAssemblyID
  rsQuoteMaterials.Fields("qmmQuoteMaterialID").value = QuoteMaterialID
	rsQuoteMaterials.Fields("uqmmImported").Value = True
  rsQuoteMaterials.Fields("qmmPartID").value = Left(PartID, 30)	
  rsQuoteMaterials.Fields("qmmPartRevisionID").value = Left(PartRevisionID, 15)

  Set rsPartRevisions = CreateObject("ADODB.Recordset")
  rsPartRevisions.Open _
    "  SELECT imrInventoryUnitOfMeasure, imrSupplierOrganizationID, imrPurchaseLocationID, " & _
    "         imrLeadTime, imrDocuments, imrShortDescription, imrLongDescriptionRTF, " & _
		"	       imrLongDescriptionText, uimrWorkcenterID, " & _
    "         imrAverageLaborCost + imrAverageOverheadCost + imrAverageMaterialCost + " & _
    "            imrAverageSubcontractCost + imrAverageDutyCost + imrAverageFreightCost + " & _
    "            imrAverageMiscCost As AvgCost, " & _
    "         imrLastLaborCost + imrLastOverheadCost + imrLastMaterialCost + " & _
    "            imrLastSubcontractCost + imrLastDutyCost + imrLastFreightCost + " & _
    "            imrLastMiscCost As LastCost, " & _
    "         imrStandardLaborCost + imrStandardOverheadCost + imrStandardMaterialCost + " & _
    "            imrStandardSubcontractCost + imrStandardDutyCost + imrStandardFreightCost + " & _
    "            imrStandardMiscCost As StdCost " & _
    "  FROM   PartRevisions " & _
    "  WHERE  imrPartID = " & App.Convert.StringToSql(rsQuoteMaterials.Fields("qmmPartID").Value) & _
    "         AND imrPartRevisionID = " & App.Convert.StringToSql(rsQuoteMaterials.Fields("qmmPartRevisionID").Value), _
    Connection, adOpenStatic, adLockReadOnly, adCmdText
	
  If Not rsPartRevisions.EOF Then
    rsQuoteMaterials.Fields("qmmUnitOfMeasure").Value = rsPartRevisions.Fields("imrInventoryUnitOfMeasure").Value
    rsQuoteMaterials.Fields("qmmSupplierOrganizationID").Value = rsPartRevisions.Fields("imrSupplierOrganizationID").Value
    rsQuoteMaterials.Fields("qmmPurchaseLocationID").Value = rsPartRevisions.Fields("imrPurchaseLocationID").Value
    rsQuoteMaterials.Fields("qmmLeadTime").Value = rsPartRevisions.Fields("imrLeadTime").Value
    rsQuoteMaterials.Fields("qmmDocuments").Value = rsPartRevisions.Fields("imrDocuments").Value
  	if trim(ShortDescription) = "" then
			rsQuoteMaterials.Fields("qmmPartShortDescription").Value = rsPartRevisions.Fields("imrShortDescription").Value
		else
			rsQuoteMaterials.Fields("qmmPartShortDescription").Value = ShortDescription
		end if
	  rsQuoteMaterials.Fields("qmmPartLongDescriptionRTF").Value = rsPartRevisions.Fields("imrLongDescriptionRTF").Value
	  rsQuoteMaterials.Fields("qmmPartLongDescriptionText").Value = rsPartRevisions.Fields("imrLongDescriptionText").Value
		rsQuoteMaterials.Fields("qmmRelatedQuoteOperationID").value = GetWorkcenterID(QuoteID, _
																																									QuoteLineID, _
																																									QuoteAssemblyID, _
																																									rsPartRevisions.Fields("uimrWorkcenterID").Value)
'		If Not (App.Ax("LotNumbers").IsLotTracked(rsQuoteMaterials.Fields("qmmPartID").value) Or _
'			      App.Ax("PartFunctions").IsSerialLotTracked(rsQuoteMaterials.Fields("qmmPartID").value)) AND _
'			 rsQuoteMaterials.Fields("qmmRelatedQuoteOperationID").value <> 0 Then
		If Not App.Ax("LotNumbers").IsLotTracked(rsQuoteMaterials.Fields("qmmPartID").value) AND _
					 rsQuoteMaterials.Fields("qmmRelatedQuoteOperationID").value <> 0 Then
		
			rsQuoteMaterials.Fields("qmmBackflush").value = True
		End If
		
		If cBool(UseDefaultValue) Then

			Const COST_AVERAGE = 1, COST_LAST = 2, COST_STANDARD = 3
	    Select Case CInt(App.Props("IM").Fields("xapIMCostingMethod").Value)
		    Case COST_AVERAGE
		      rsQuoteMaterials.Fields("qmmEstimatedUnitCost").Value = rsPartRevisions.Fields("AvgCost").Value 
		    Case COST_LAST
		      rsQuoteMaterials.Fields("qmmEstimatedUnitCost").Value = rsPartRevisions.Fields("LastCost").Value 
		    Case COST_STANDARD
		      rsQuoteMaterials.Fields("qmmEstimatedUnitCost").Value = rsPartRevisions.Fields("StdCost").Value 
	    End Select
		Else
  		rsQuoteMaterials.Fields("qmmEstimatedUnitCost").Value = DefaultPrice
			' The below line must stay commented out. Enabling the line causes an error when using
			' the purchasing wizard. "The purchase quantity is less than the required quantity."
			' Evaluate enabling the line once we move to v9
			 rsQuoteMaterials.Fields("qmmCostOverride").Value = True
		End If
		
    App.Ax("PartFunctions").GetDefaultWarehouseAndBin rsQuoteMaterials.Fields("qmmPartID").Value, _
                                                  rsQuoteMaterials.Fields("qmmPartRevisionID").Value, _
                                                  rsQuoteMaterials.Fields("qmmPartWarehouseLocationID"), _
                                                  rsQuoteMaterials.Fields("qmmPartBinID"), _
	                                                "  SELECT qmpPlantID " & _
	                                                "  FROM   Quotes " & _
	                                                "  WHERE  qmpQuoteID = " & _
																														App.Convert.StringToSql(rsQuoteMaterials.Fields("qmmQuoteID").Value)
	Else
		rsQuoteMaterials.Fields("qmmUnitOfMeasure").value = App.Props("OM").Fields("xapomunitofmeasure").Value
  End If
	
  rsPartRevisions.Close
	
	If Trim(ShortDescription) <> "" Then
  	rsQuoteMaterials.Fields("qmmPartShortDescription").Value = Left(ShortDescription, 50)
	End If
	
	If Trim(LongDescription) <> "" Then
	  rsQuoteMaterials.Fields("qmmPartLongDescriptionRTF").Value = LongDescription
	  rsQuoteMaterials.Fields("qmmPartLongDescriptionText").Value = LongDescription
	End If
	
  For nLoop = 1 To 9
    rsQuoteMaterials.Fields("qmmQuantityBreak" & App.Convert.NumberToSql(nLoop)).Value = 0
    rsQuoteMaterials.Fields("qmmUnitCost" & App.Convert.NumberToSql(nLoop)).Value = 0
  Next
	
  Set rsCurrency = CreateObject("ADODB.Recordset")  
  rsCurrency.open _
    "  SELECT cmlCurrencyRateID " & _
    "  FROM   OrganizationLocations " & _
    "  WHERE  cmlOrganizationID = " &  App.Convert.StringToSql(rsQuoteMaterials.Fields("qmmSupplierOrganizationID").Value) & _
    "         AND cmlLocationID = " & App.Convert.StringToSql(rsQuoteMaterials.Fields("qmmPurchaseLocationID").Value), _
    Connection, adOpenStatic, adLockReadOnly, adCmdText
	
  If Not rsCurrency.EOF Then
    nCurrency = rsCurrency.Fields("cmlCurrencyRateID").Value
  Else
    nCurrency = App.HomeCurrencyID
  End If
  rsCurrency.Close
  
  rsQuoteMaterials.Fields("qmmSourcePriceID").Value = _
    App.Ax("PartFunctions").GetPurchasePriceID(rsQuoteMaterials.Fields("qmmPartID").Value, _
                                          rsQuoteMaterials.Fields("qmmPartRevisionID").Value, _
                                          rsQuoteMaterials.Fields("qmmSupplierOrganizationID").Value,_
                                          rsQuoteMaterials.Fields("qmmPurchaseLocationID").Value, _
                                          nCurrency)

  If cLng(rsQuoteMaterials.Fields("qmmSourcePriceID").Value) <> 0 Then
    Set rsTemp = CreateObject("ADODB.Recordset")
    Set rsDate = CreateObject("ADODB.Recordset")
    rsTemp.Open _
      "  SELECT PartPriceBreaks.*, imiInventoryPrice, imiCurrencyRateID " & _
      "  FROM   PartPriceBreaks " & _
      "         INNER JOIN PartPrices " & _
      "                 ON imjPartPriceID = imiPartPriceID " & _
      "  WHERE imjPartPriceID = " & App.Convert.NumberToSql(rsQuoteMaterials.Fields("qmmSourcePriceID").Value) & _
      "        AND imjUnitPrice <> 0", _
      Connection, adOpenStatic, adLockReadOnly, adCmdText
    rsDate.open _
      "  SELECT qmpQuoteDate " & _
      "  FROM   Quotes " & _
      "  WHERE  qmpQuoteID = " & App.Convert.StringToSql(rsQuoteMaterials.Fields("qmmQuoteID").value), _
      Connection, adOpenStatic, adLockReadOnly, adCmdText    
    
    If Not rsTemp.EOF Then
      If Not rsDate.EOF Then
        Rate= App.Financial.GetExchangeRate(rsTemp.Fields("imiCurrencyRateID").value, rsDate.Fields("qmpQuoteDate").value)      
      End If 
      If Rate = 0 then
        Rate = 1
      End If
      If CInt(rsTemp.Fields("imiInventoryPrice").Value) = 0 Then
        Conversion = CDbl(App.Ax("PartFunctions").GetConversionFactor(rsQuoteMaterials.Fields("qmmPartID").Value, _
                                                                 rsQuoteMaterials.Fields("qmmPartRevisionID").Value, _
                                                                 rsQuoteMaterials.Fields("qmmSupplierOrganizationID").Value))
        If Conversion <= 0 Then
          Conversion = 1
        End If
      Else
        Conversion = 1
      End If
      nLoop = 0
      Do While rsTemp.EOF = False
        nLoop = nLoop + 1
        If nLoop <= 9 Then
          rsQuoteMaterials.Fields("qmmQuantityBreak" & App.Convert.NumberToSql(nLoop)).Value = _
            App.Round(CDbl(rsTemp.Fields("imjQuantity").Value), App.Ax("Production").InventoryQuantityDecimals)

          If Trim(rsTemp.Fields("imiCurrencyRateID").value) <> "" And _
            Trim(rsTemp.Fields("imiCurrencyRateID").value) <> Trim(App.HomeCurrencyID) Then
            rsQuoteMaterials.Fields("qmmUnitCost" & App.Convert.NumberToSql(nLoop)).Value = _
              App.Round((CDbl(CDbl(rsTemp.Fields("imjUnitPrice").Value) * Conversion) / Rate), 5)
          Else
            rsQuoteMaterials.Fields("qmmUnitCost" & App.Convert.NumberToSql(nLoop)).Value = _
              App.Round(CDbl(rsTemp.Fields("imjUnitPrice").Value) * Conversion, 5)
          End If
        Else
          Exit Do
        End If
        rsTemp.MoveNext
      Loop
    End If
    rsTemp.Close
  End If

  rsQuoteMaterials.Fields("qmmQuantityPerAssembly").value = QuantityPerAssembly
	
  rsQuoteMaterials.Fields("qmmCreatedBy").value = App.UserID
  rsQuoteMaterials.Fields("qmmCreatedDate").value = Now()
End Function
						
Private Function GetWorkcenterID(QuoteID, QuoteLineID, QuoteAssemblyID, WorkcenterID)
	Set rsWorkcenterID = Connection.Execute( _
													"	SELECT qmoQuoteOperationID " & _
													"	FROM   QuoteOperations " & _
													"	WHERE  qmoQuoteID = " & App.Convert.StringToSql(QuoteID) & _
													"	       AND qmoQuoteLineID = " & App.Convert.NumberToSql(QuoteLineID) & _
													"	       AND qmoQuoteAssemblyID = " & App.Convert.NumberToSql(QuoteAssemblyID) & _
													"	       AND qmoWorkCenterID = " & App.Convert.StringToSql(WorkcenterID))
	
	If rsWorkcenterID.EOF Then
		GetWorkcenterID = 0
	Else
		GetWorkcenterID = rsWorkcenterID.Fields("qmoQuoteOperationID").Value
	End If
End Function
						
Private Function CabinetBuilderPartIDTranslation(ByVal MaterialID, MaterialType)
	Set rsuMaterials = CreateObject("ADODB.RecordSet")
	rsuMaterials.Open _
		"	SELECT ucmUnitOfIssueID, ucmPartID, ucmPartRevisionID " & _
		"	FROM   uMaterials " & _
		"	WHERE  ucmCabinetVisionID = " & App.Convert.NumberToSql(MaterialID) & _
		"	       AND ucmMaterialType = " & App.Convert.NumberToSql(MaterialType), _
    Connection, adOpenStatic, adLockReadOnly, adCmdText
	
	If Not rsuMaterials.EOF then
		Data = Array(rsuMaterials.Fields("ucmPartID").Value, _
		             rsuMaterials.Fields("ucmPartRevisionID").Value, _
		             rsuMaterials.Fields("ucmUnitOfIssueID").Value)
	Else
		Data = Array("", "", -1)
	End If
	
	CabinetBuilderPartIDTranslation = Data
End Function
		
Private Function JoinMap(ByRef rsDataRecord, ByVal DescriptionMap)
	Output = ""
	If DEBUG_MODE and Not IsArray(DescriptionMap) Then
		Data = ""
		For Count = 0 to rsDataRecord.Fields.Count - 1
			Data = Data & " " & rsDataRecord.Fields(Count).Name
		Next
'		App.DebugLog Data, DEBUG_MODE
	End If
	For Each Pair in DescriptionMap 
		If Output <> "" Then 
			Output = Output & vbNewLine
		End If
		
		If uBound(Pair) >= 2 then
			For Each OptionSet in Pair(2) 
				If OptionSet(0) = rsDataRecord.Fields(Pair(1)).Value Then
'					App.DebugLog "JOIN MAP - 3 PAIR - " & Pair(0) & "|" & Pair(1), DEBUG_MODE
					Output = Output & Pair(0) & " = " & Trim(OptionSet(1))
					Exit For
				End If
			next
		Else
'			App.DebugLog "JOIN MAP - 2 PAIR - " & Join(Pair, "|"), DEBUG_MODE
			Output = Output & Pair(0) & " = " & Trim(rsDataRecord.Fields(Pair(1)).Value)
		End If
	Next

	JoinMap = Output
End Function
					
Private Function GetCVMaterials(TableID)
	SET GetCVMaterials = MaterialsDBConnection.Execute("	SELECT * " & _
	                                                   "	FROM   [tbl Material] " & _
	                                                   "	WHERE  [ID] Like " & App.Convert.ToSql(TableID) & _
													   												"											and [ID] >= 0")
End Function
					
Private Function GetAllCVMaterials()
	SET GetAllCVMaterials = MaterialsDBConnection.Execute("	SELECT * " & _
	                                                   "	FROM   [tbl Material] " & _
	                                                   "	WHERE  [ID] >= 0")
End Function
					
Private Function GetCVSheet(SheetID)
	Set GetCVSheet = MaterialsDBConnection.Execute("	SELECT  * " & _
							          	 									    "	FROM    [tbl Sheet Size] " & _
	                                               "	WHERE   [ID] LIKE " & App.Convert.NumberToSql(SheetID))
End Function
					
Private Function GetProfiles(ProfileID)
	SET GetProfiles = MaterialsDBConnection.Execute("	SELECT * " & _
	                                                "	FROM   [tbl Profiles] " & _
	                                                "	WHERE  [ID] = " & App.Convert.NumberToSql(ProfileID))
End Function
					
Public Function IsLaborEnabled()
	'if any parts with [material ID]=1381 exist, labor hasn't been turned on in CV
	isLaborEnabled = ReportDBConnection.Execute("	SELECT	1 " & _
							          	 									 "	FROM    Parts " & _
	                                            "	WHERE   [Material ID] = 1381").EOF
End Function
					
private function GetRoomNameFromCabinetID (CabinetID)
	GetRoomNameFromCabinetID = trim(reportDBConnection.Execute("	SELECT	RoomName" & _
													          	 								"	FROM    Rooms " & _
																											 "	INNER JOIN Cabinets " & _
																											 "		ON (Cabinets.[Room ID] = Rooms.RoomNumber) " & _
							                                         "	WHERE   Cabinets.[Cabinet ID] = " & _
																											 App.Convert.NumberToSql(CabinetID)).fields("RoomName").value)
end function
					
Private Function GetMaterialNameFromID (MaterialID)
	getMaterialNameFromID = trim(materialsDBConnection.execute("	SELECT  name " & _
																														"	FROM		[tbl material] " & _
																														"	WHERE	 ID = " & App.Convert.NumberToSql(MaterialID)).fields("Name").value)
end function
					
Private Function GetProfileNameFromID (ProfileID)
	GetProfileNameFromID = trim(materialsDBConnection.execute("	SELECT  name " & _
																														"	FROM		[tbl profiles] " & _
																														"	WHERE	 ID = " & App.Convert.NumberToSql(ProfileID)).fields("Name").value)
end function
					
Private Function GetRoomNameFromID (RoomNumber)
	GetRoomNameFromID = trim(ReportDBConnection.execute("	SELECT  RoomName " & _
																										  "	FROM		Rooms " & _
																											"	WHERE	 RoomNumber = " & App.Convert.NumberToSql(RoomNumber)).fields("RoomName").value)
end function
