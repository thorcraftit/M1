Function this_initialize(sender, e)
	includeScript "vbsCabinetVisionByRoomImport"
	includeScript "vbsUpdateRevisedPrice"

	controls("optImportType").ValueString = 1	
end function

Function txtProjectAreaID_SearchClick()
	If Trim(Controls("txtQmpProjectID").Value) <> "" Then 
		Controls("txtProjectAreaID").Search.AdditionalFilter = "praProjectID = " & App.Convert.StringToSql(Controls("txtQmpProjectID").Value)
	Else
		Controls("txtProjectAreaID").Search.AdditionalFilter = ""
	End If
End Function

Function cmdImportRooms_Click(sender, e)
	If (Trim(Controls("txtQmpProjectID").Value) <> "" AND Trim(Controls("txtProjectAreaID").Value) <> "") _
		Or (Trim(Controls("txtQmpProjectID").Value) = "" AND Trim(Controls("txtProjectAreaID").Value) = "") Then
		If this.SaveView = 0 Then
			
			vbsCabinetVisionByRoomImport.CloseDatabases
			vbsCabinetVisionByRoomImport.OpenDatabases
			
			if vbsCabinetVisionByRoomImport.isLaborEnabled() then
				QuoteLines = vbsCabinetVisionByRoomImport.CreateProjectQuoteLines(Controls("txtqmpQuoteID").Value, _
									 																										 Controls("txtQmpProjectID").Value, _
									 																										 Controls("txtProjectAreaID").Value, _
																																				cint(controls("optImportType").ValueString))

				For Each QuoteLineID In QuoteLines 
					vbsUpdateRevisedPrice.UpdateRevisedPrices Controls("txtQmpQuoteID").Value, QuoteLineID
					'vbsUpdateRevisedPrice.ForeRefreshTaxes Controls("txtQmpQuoteID").Value, QuoteLineID
				Next

			else
				msgbox "Please enable pricing in Cabinet Vision before generating quote data.", _
				       vbExclamation + vbOkOnly, _
               "Error in Import Process"
			end if
				
			vbsCabinetVisionByRoomImport.CloseDatabases
			this.OnDataChanged(3)
				
		End If
	Else
		Msgbox "If you have a Project ID, you are required to enter a Project Area ID. " & _
				   "If you enter a Project Area ID, you must have a Project ID.", _
				   vbExclamation + vbOkOnly, _
			     "Error in Import Process"
	End If
End Function

Function chkPaymentScheduled_ValueChanged(sender, e)
	If controls("chkPaymentScheduled").value = 0 Then
		controls("txtUQmpDepositAmount").value = 0
		controls("txtUqmpSecondPaymentAmount").value = 0
		controls("txtUqmpPaymentDeliveryAmount").value = 0		
	End If	
End Function

Function chkBuilderCredit_ValueChanged(sender, e)
	If controls("chkBuilderCredit").value = false Then
		controls("txtBuilderCreditID").value = ""
	End If	
End Function

Function UpdateCustomerName(ByVal QuoteID, ByVal OrganizationLocationID, ByVal LocationID)
	Dim rsCustLookup
	Set rsCustLookup = CreateObject("ADODB.Recordset")
	rsCustLookup.Open "	select cmlName " & _
										"	from OrganizationLocations " & _
										"	where cmlOrganizationID = " & App.Convert.StringToSql(OrganizationLocationID) & _
										" 	 and cmlLocationID = " & App.Convert.StringToSql(LocationID), _
											Connection,adOpenStatic,adLockReadOnly,adCmdText
	If not rsCustLookup.EOF Then
		dim rsQuote
		set rsQuote = CreateObject("ADODB.Recordset")
		rsQuote.open	"	select qmpQuoteID, uqmpCustomerName from Quotes " & _
									"	where qmpQuoteID = " & App.Convert.StringToSql(QuoteID), _
									Connection,adOpenStatic,adLockReadOnly,adCmdText
		if not rsQuote.EOF then
			if rsQuote.fields("uqmpCustomerName").value <> rsCustLookup.fields("cmlName").value then 
				rsQuote.fields("uqmpCustomerName").value = rsCustLookup.fields("cmlName").value
				rsQuote.UpdateBatch
			end if
			
		end if	
	end if

	rsCustLookup.Close
	this.OnDataChanged(3)
end function

Function M1DataControl_SaveDataCompleted(sender, e)
	if trim(controls("txtqmpQuoteID").value) <> "" then
		UpdateCustomerName	controls("txtQmpQuoteID").value, _
												controls("txtQmpShipOrganizationID").Value, _
												controls("txtQmpShipLocationID").value
		UpdateProjectOnQuoteLines controls("txtqmpQuoteID").value, controls("txtQmpProjectID").value
	end if
End Function
	
function UpdateProjectOnQuoteLines(ByVal QuoteID, ByVal ProjectID) 
	
	dim rsQuoteLines
	Set rsQuoteLines = CreateObject("ADODB.Recordset")
		
	rsQuoteLines.Open "	select qmlQuoteID, qmlQuoteLineID, qmlProjectID " & _
										"	from QuoteLines	" & _
										"	where qmlQuoteID = " & app.convert.NumberToSql(QuoteID) & _
										"	order by qmlQuoteLineID", _
										Connection,adOpenStatic,adLockReadOnly,adCmdText
	if not rsQuoteLines.EOF then
		do while not rsQuotelines.EOF
			rsQuotelines.Fields("qmlProjectID").value = ProjectID
			rsQuotelines.MoveNext()
		loop
		rsQuoteLines.UpdateBatch
	end if

end function 
		
Function cmdCloseDatabases_Click(sender, e)
	vbsCabinetVisionByRoomImport.CloseDatabases
End Function
		

Function cmdUpdateLead_Click(sender, e)
	'check if LeadID in txtuqmpLeadID exists. If not, error and exit
	set rsLeads = createobject("adodb.recordset")
	rsLeads.open "select * from Leads where lopLeadID = " & App.Convert.StringToSql(trim(controls("txtuqmpLeadID").value)), _
							 Connection,adOpenStatic,adLockReadOnly,adCmdText	
	if rsLeads.EOF then 
		msgbox "No Lead found for ID " & controls("txtuqmpLeadID").value & ". Please select a lead."
		Exit function
	end if
			
	'check for PROJECTEDSALES lead line. Error/exit if it doesn't exist.
	set rsLeadLines = createobject("adodb.recordset")
	rsLeadLines.open "select top 1 * from LeadLines where lolPartid = 'PROJECTEDSALES' and lolLeadID = " & App.Convert.StringToSql(trim(controls("txtuqmpLeadID").value)), _
							 Connection,adOpenStatic,adLockReadOnly,adCmdText
	if rsLeadLines.EOF then 
		msgbox "Lead Line not found for lead " & controls("txtuqmpLeadID").value & ". Please add a PROJECTEDSALES lead line. Exiting. No changes made."
		Exit function
	end if
	
	'if lead exists, calculate quote total.
	set rsQuoteTotal = createobject("adodb.recordset")
	rsQuoteTotal.open _
						"select	sum (qmqQuoteQuantity*qmqRevisedUnitPriceBase) as QuoteTotal " & _
						"from	QuoteLines " & _
						"LEFT JOIN	Parts " & _
						"			on qmlpartid = impPartID " & _
						"INNER JOIN	QuoteQuantities  " & _
						"			on	qmlQuoteID = qmqQuoteID " & _
						"				and qmlQuoteLineID = qmqQuoteLineID " & _
						"where	impPartClassID not in ('DISC','INSTA','DELIV') " & _
						"	and qmlQuoteID = " & App.convert.StringToSql(trim(controls("txtQmpQuoteID").value)), _
						Connection,adOpenStatic,adLockReadOnly,adCmdText
	
	if rsQuoteTotal.EOF then 
		msgbox "No quote total. Exiting. No changes made."
		exit function
	else
		QuoteTotal = cdbl(rsQuoteTotal.fields("QuoteTotal").value)
	end if
			
	' Quote discount total
	set rsDiscountTotal = createobject("adodb.recordset")
	rsDiscountTotal.open _
						"select	sum (qmqQuoteQuantity*qmqRevisedUnitPriceBase) as DiscountTotal " & _
						"from	QuoteLines " & _
						"LEFT JOIN	Parts " & _
						"			on qmlpartid = impPartID " & _
						"INNER JOIN	QuoteQuantities  " & _
						"			on	qmlQuoteID = qmqQuoteID " & _
						"				and qmlQuoteLineID = qmqQuoteLineID " & _
						"where	impPartClassID = 'DISC' " & _
						"	and qmlQuoteID = " & App.convert.StringToSql(trim(controls("txtQmpQuoteID").value)), _
						Connection,adOpenStatic,adLockReadOnly,adCmdText
	
	if rsDiscountTotal.EOF then 
		DiscountTotal = 0 
	else
		DiscountTotal = cdbl(rsDiscountTotal.fields("DiscountTotal").value) * cdbl(-1)
	end if
			
	'Confirmation popup
	if msgbox 	("Updating Lead " & controls("txtuqmpLeadID").value & vbnewline & _
							"Current Lead Total: " & rsLeadLines.fields("lolUnitSalePriceBase").value & _
							vbnewline & vbnewline & _
							"Continuing will update the lead with the current quote total $" & QuoteTotal & "." & _
							vbnewline & vbnewline & _
							"Continue?", _
				vbyesno + vbquestion) = vbNo then
		msgbox "Lead not updated."
		exit function
	end if

	'save the new total to the lead.				
	rsLeadLines.fields("lolQuantity").value = cdbl(1)
	rsLeadLines.fields("lolUnitSalePriceBase").value = QuoteTotal
	rsLeadLines.fields("lolDiscountAmount").value = DiscountTotal
	rsLeadLines.fields("lolDiscountPercent").value = DiscountTotal/QuoteTotal
	rsLeadLines.fields("lolGrossAmount").value = QuoteTotal
	rsLeadLines.fields("lolRevenueForecast").value = QuoteTotal - DiscountTotal
	
	rsLeadLines.UpdateBatch()			

End Function
		
